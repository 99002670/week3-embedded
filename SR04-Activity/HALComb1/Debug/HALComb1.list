
HALComb1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08004098  08004098  00014098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004154  08004154  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004154  08004154  00014154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800415c  0800415c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800415c  0800415c  0001415c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004160  08004160  00014160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e4  20000070  080041d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  080041d4  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000090ef  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000176f  00000000  00000000  0002918f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007c0  00000000  00000000  0002a900  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006f8  00000000  00000000  0002b0c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021596  00000000  00000000  0002b7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006bc1  00000000  00000000  0004cd4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c727a  00000000  00000000  0005390f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011ab89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026bc  00000000  00000000  0011ac04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004080 	.word	0x08004080

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004080 	.word	0x08004080

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b972 	b.w	8000d48 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9e08      	ldr	r6, [sp, #32]
 8000a82:	4604      	mov	r4, r0
 8000a84:	4688      	mov	r8, r1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d14b      	bne.n	8000b22 <__udivmoddi4+0xa6>
 8000a8a:	428a      	cmp	r2, r1
 8000a8c:	4615      	mov	r5, r2
 8000a8e:	d967      	bls.n	8000b60 <__udivmoddi4+0xe4>
 8000a90:	fab2 f282 	clz	r2, r2
 8000a94:	b14a      	cbz	r2, 8000aaa <__udivmoddi4+0x2e>
 8000a96:	f1c2 0720 	rsb	r7, r2, #32
 8000a9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a9e:	fa20 f707 	lsr.w	r7, r0, r7
 8000aa2:	4095      	lsls	r5, r2
 8000aa4:	ea47 0803 	orr.w	r8, r7, r3
 8000aa8:	4094      	lsls	r4, r2
 8000aaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aae:	0c23      	lsrs	r3, r4, #16
 8000ab0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ab4:	fa1f fc85 	uxth.w	ip, r5
 8000ab8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000abc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ac0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ac4:	4299      	cmp	r1, r3
 8000ac6:	d909      	bls.n	8000adc <__udivmoddi4+0x60>
 8000ac8:	18eb      	adds	r3, r5, r3
 8000aca:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ace:	f080 811b 	bcs.w	8000d08 <__udivmoddi4+0x28c>
 8000ad2:	4299      	cmp	r1, r3
 8000ad4:	f240 8118 	bls.w	8000d08 <__udivmoddi4+0x28c>
 8000ad8:	3f02      	subs	r7, #2
 8000ada:	442b      	add	r3, r5
 8000adc:	1a5b      	subs	r3, r3, r1
 8000ade:	b2a4      	uxth	r4, r4
 8000ae0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ae4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ae8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aec:	fb00 fc0c 	mul.w	ip, r0, ip
 8000af0:	45a4      	cmp	ip, r4
 8000af2:	d909      	bls.n	8000b08 <__udivmoddi4+0x8c>
 8000af4:	192c      	adds	r4, r5, r4
 8000af6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000afa:	f080 8107 	bcs.w	8000d0c <__udivmoddi4+0x290>
 8000afe:	45a4      	cmp	ip, r4
 8000b00:	f240 8104 	bls.w	8000d0c <__udivmoddi4+0x290>
 8000b04:	3802      	subs	r0, #2
 8000b06:	442c      	add	r4, r5
 8000b08:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b0c:	eba4 040c 	sub.w	r4, r4, ip
 8000b10:	2700      	movs	r7, #0
 8000b12:	b11e      	cbz	r6, 8000b1c <__udivmoddi4+0xa0>
 8000b14:	40d4      	lsrs	r4, r2
 8000b16:	2300      	movs	r3, #0
 8000b18:	e9c6 4300 	strd	r4, r3, [r6]
 8000b1c:	4639      	mov	r1, r7
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d909      	bls.n	8000b3a <__udivmoddi4+0xbe>
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	f000 80eb 	beq.w	8000d02 <__udivmoddi4+0x286>
 8000b2c:	2700      	movs	r7, #0
 8000b2e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b32:	4638      	mov	r0, r7
 8000b34:	4639      	mov	r1, r7
 8000b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3a:	fab3 f783 	clz	r7, r3
 8000b3e:	2f00      	cmp	r7, #0
 8000b40:	d147      	bne.n	8000bd2 <__udivmoddi4+0x156>
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d302      	bcc.n	8000b4c <__udivmoddi4+0xd0>
 8000b46:	4282      	cmp	r2, r0
 8000b48:	f200 80fa 	bhi.w	8000d40 <__udivmoddi4+0x2c4>
 8000b4c:	1a84      	subs	r4, r0, r2
 8000b4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b52:	2001      	movs	r0, #1
 8000b54:	4698      	mov	r8, r3
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	d0e0      	beq.n	8000b1c <__udivmoddi4+0xa0>
 8000b5a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b5e:	e7dd      	b.n	8000b1c <__udivmoddi4+0xa0>
 8000b60:	b902      	cbnz	r2, 8000b64 <__udivmoddi4+0xe8>
 8000b62:	deff      	udf	#255	; 0xff
 8000b64:	fab2 f282 	clz	r2, r2
 8000b68:	2a00      	cmp	r2, #0
 8000b6a:	f040 808f 	bne.w	8000c8c <__udivmoddi4+0x210>
 8000b6e:	1b49      	subs	r1, r1, r5
 8000b70:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b74:	fa1f f885 	uxth.w	r8, r5
 8000b78:	2701      	movs	r7, #1
 8000b7a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b7e:	0c23      	lsrs	r3, r4, #16
 8000b80:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b88:	fb08 f10c 	mul.w	r1, r8, ip
 8000b8c:	4299      	cmp	r1, r3
 8000b8e:	d907      	bls.n	8000ba0 <__udivmoddi4+0x124>
 8000b90:	18eb      	adds	r3, r5, r3
 8000b92:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x122>
 8000b98:	4299      	cmp	r1, r3
 8000b9a:	f200 80cd 	bhi.w	8000d38 <__udivmoddi4+0x2bc>
 8000b9e:	4684      	mov	ip, r0
 8000ba0:	1a59      	subs	r1, r3, r1
 8000ba2:	b2a3      	uxth	r3, r4
 8000ba4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ba8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bac:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bb0:	fb08 f800 	mul.w	r8, r8, r0
 8000bb4:	45a0      	cmp	r8, r4
 8000bb6:	d907      	bls.n	8000bc8 <__udivmoddi4+0x14c>
 8000bb8:	192c      	adds	r4, r5, r4
 8000bba:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x14a>
 8000bc0:	45a0      	cmp	r8, r4
 8000bc2:	f200 80b6 	bhi.w	8000d32 <__udivmoddi4+0x2b6>
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	eba4 0408 	sub.w	r4, r4, r8
 8000bcc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bd0:	e79f      	b.n	8000b12 <__udivmoddi4+0x96>
 8000bd2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bd6:	40bb      	lsls	r3, r7
 8000bd8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bdc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000be0:	fa01 f407 	lsl.w	r4, r1, r7
 8000be4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000be8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bec:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bf0:	4325      	orrs	r5, r4
 8000bf2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bf6:	0c2c      	lsrs	r4, r5, #16
 8000bf8:	fb08 3319 	mls	r3, r8, r9, r3
 8000bfc:	fa1f fa8e 	uxth.w	sl, lr
 8000c00:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c04:	fb09 f40a 	mul.w	r4, r9, sl
 8000c08:	429c      	cmp	r4, r3
 8000c0a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c0e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b0>
 8000c14:	eb1e 0303 	adds.w	r3, lr, r3
 8000c18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c1c:	f080 8087 	bcs.w	8000d2e <__udivmoddi4+0x2b2>
 8000c20:	429c      	cmp	r4, r3
 8000c22:	f240 8084 	bls.w	8000d2e <__udivmoddi4+0x2b2>
 8000c26:	f1a9 0902 	sub.w	r9, r9, #2
 8000c2a:	4473      	add	r3, lr
 8000c2c:	1b1b      	subs	r3, r3, r4
 8000c2e:	b2ad      	uxth	r5, r5
 8000c30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c34:	fb08 3310 	mls	r3, r8, r0, r3
 8000c38:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c3c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c40:	45a2      	cmp	sl, r4
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1da>
 8000c44:	eb1e 0404 	adds.w	r4, lr, r4
 8000c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4c:	d26b      	bcs.n	8000d26 <__udivmoddi4+0x2aa>
 8000c4e:	45a2      	cmp	sl, r4
 8000c50:	d969      	bls.n	8000d26 <__udivmoddi4+0x2aa>
 8000c52:	3802      	subs	r0, #2
 8000c54:	4474      	add	r4, lr
 8000c56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c5e:	eba4 040a 	sub.w	r4, r4, sl
 8000c62:	454c      	cmp	r4, r9
 8000c64:	46c2      	mov	sl, r8
 8000c66:	464b      	mov	r3, r9
 8000c68:	d354      	bcc.n	8000d14 <__udivmoddi4+0x298>
 8000c6a:	d051      	beq.n	8000d10 <__udivmoddi4+0x294>
 8000c6c:	2e00      	cmp	r6, #0
 8000c6e:	d069      	beq.n	8000d44 <__udivmoddi4+0x2c8>
 8000c70:	ebb1 050a 	subs.w	r5, r1, sl
 8000c74:	eb64 0403 	sbc.w	r4, r4, r3
 8000c78:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c7c:	40fd      	lsrs	r5, r7
 8000c7e:	40fc      	lsrs	r4, r7
 8000c80:	ea4c 0505 	orr.w	r5, ip, r5
 8000c84:	e9c6 5400 	strd	r5, r4, [r6]
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e747      	b.n	8000b1c <__udivmoddi4+0xa0>
 8000c8c:	f1c2 0320 	rsb	r3, r2, #32
 8000c90:	fa20 f703 	lsr.w	r7, r0, r3
 8000c94:	4095      	lsls	r5, r2
 8000c96:	fa01 f002 	lsl.w	r0, r1, r2
 8000c9a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ca2:	4338      	orrs	r0, r7
 8000ca4:	0c01      	lsrs	r1, r0, #16
 8000ca6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000caa:	fa1f f885 	uxth.w	r8, r5
 8000cae:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cb2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb6:	fb07 f308 	mul.w	r3, r7, r8
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc0:	d907      	bls.n	8000cd2 <__udivmoddi4+0x256>
 8000cc2:	1869      	adds	r1, r5, r1
 8000cc4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cc8:	d22f      	bcs.n	8000d2a <__udivmoddi4+0x2ae>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d92d      	bls.n	8000d2a <__udivmoddi4+0x2ae>
 8000cce:	3f02      	subs	r7, #2
 8000cd0:	4429      	add	r1, r5
 8000cd2:	1acb      	subs	r3, r1, r3
 8000cd4:	b281      	uxth	r1, r0
 8000cd6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cda:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cde:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce2:	fb00 f308 	mul.w	r3, r0, r8
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d907      	bls.n	8000cfa <__udivmoddi4+0x27e>
 8000cea:	1869      	adds	r1, r5, r1
 8000cec:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cf0:	d217      	bcs.n	8000d22 <__udivmoddi4+0x2a6>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d915      	bls.n	8000d22 <__udivmoddi4+0x2a6>
 8000cf6:	3802      	subs	r0, #2
 8000cf8:	4429      	add	r1, r5
 8000cfa:	1ac9      	subs	r1, r1, r3
 8000cfc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d00:	e73b      	b.n	8000b7a <__udivmoddi4+0xfe>
 8000d02:	4637      	mov	r7, r6
 8000d04:	4630      	mov	r0, r6
 8000d06:	e709      	b.n	8000b1c <__udivmoddi4+0xa0>
 8000d08:	4607      	mov	r7, r0
 8000d0a:	e6e7      	b.n	8000adc <__udivmoddi4+0x60>
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	e6fb      	b.n	8000b08 <__udivmoddi4+0x8c>
 8000d10:	4541      	cmp	r1, r8
 8000d12:	d2ab      	bcs.n	8000c6c <__udivmoddi4+0x1f0>
 8000d14:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d18:	eb69 020e 	sbc.w	r2, r9, lr
 8000d1c:	3801      	subs	r0, #1
 8000d1e:	4613      	mov	r3, r2
 8000d20:	e7a4      	b.n	8000c6c <__udivmoddi4+0x1f0>
 8000d22:	4660      	mov	r0, ip
 8000d24:	e7e9      	b.n	8000cfa <__udivmoddi4+0x27e>
 8000d26:	4618      	mov	r0, r3
 8000d28:	e795      	b.n	8000c56 <__udivmoddi4+0x1da>
 8000d2a:	4667      	mov	r7, ip
 8000d2c:	e7d1      	b.n	8000cd2 <__udivmoddi4+0x256>
 8000d2e:	4681      	mov	r9, r0
 8000d30:	e77c      	b.n	8000c2c <__udivmoddi4+0x1b0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	442c      	add	r4, r5
 8000d36:	e747      	b.n	8000bc8 <__udivmoddi4+0x14c>
 8000d38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d3c:	442b      	add	r3, r5
 8000d3e:	e72f      	b.n	8000ba0 <__udivmoddi4+0x124>
 8000d40:	4638      	mov	r0, r7
 8000d42:	e708      	b.n	8000b56 <__udivmoddi4+0xda>
 8000d44:	4637      	mov	r7, r6
 8000d46:	e6e9      	b.n	8000b1c <__udivmoddi4+0xa0>

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(uint8_t time)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i;i<time;i++);
 8000d56:	e002      	b.n	8000d5e <delay+0x12>
 8000d58:	7bfb      	ldrb	r3, [r7, #15]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	73fb      	strb	r3, [r7, #15]
 8000d5e:	7bfa      	ldrb	r2, [r7, #15]
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d3f8      	bcc.n	8000d58 <delay+0xc>
}
 8000d66:	bf00      	nop
 8000d68:	3714      	adds	r7, #20
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
	...

08000d74 <hcsr04_read>:
uint32_t local_time, sensor_time;
uint32_t distance;
uint32_t PotVal;

uint32_t hcsr04_read (void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
 local_time=0;
 8000d78:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <hcsr04_read+0x6c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);  // pull the TRIG pin HIGH
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2102      	movs	r1, #2
 8000d82:	4818      	ldr	r0, [pc, #96]	; (8000de4 <hcsr04_read+0x70>)
 8000d84:	f001 fb5e 	bl	8002444 <HAL_GPIO_WritePin>
 delay(2);  // wait for 2 us
 8000d88:	2002      	movs	r0, #2
 8000d8a:	f7ff ffdf 	bl	8000d4c <delay>


 HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000d8e:	2201      	movs	r2, #1
 8000d90:	2102      	movs	r1, #2
 8000d92:	4814      	ldr	r0, [pc, #80]	; (8000de4 <hcsr04_read+0x70>)
 8000d94:	f001 fb56 	bl	8002444 <HAL_GPIO_WritePin>
 delay(10);  // wait for 10 us
 8000d98:	200a      	movs	r0, #10
 8000d9a:	f7ff ffd7 	bl	8000d4c <delay>
 HAL_GPIO_WritePin(Trigger_GPIO_Port, Trigger_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2102      	movs	r1, #2
 8000da2:	4810      	ldr	r0, [pc, #64]	; (8000de4 <hcsr04_read+0x70>)
 8000da4:	f001 fb4e 	bl	8002444 <HAL_GPIO_WritePin>

 // read the time for which the pin is high

 while (!(HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin)));  // wait for the ECHO pin to go high
 8000da8:	bf00      	nop
 8000daa:	2108      	movs	r1, #8
 8000dac:	480d      	ldr	r0, [pc, #52]	; (8000de4 <hcsr04_read+0x70>)
 8000dae:	f001 fb31 	bl	8002414 <HAL_GPIO_ReadPin>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d0f8      	beq.n	8000daa <hcsr04_read+0x36>
 while (HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin))    // while the pin is high
 8000db8:	e007      	b.n	8000dca <hcsr04_read+0x56>
  {
  local_time++;   // measure time for which the pin is high
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <hcsr04_read+0x6c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <hcsr04_read+0x6c>)
 8000dc2:	6013      	str	r3, [r2, #0]
  delay(1);
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	f7ff ffc1 	bl	8000d4c <delay>
 while (HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin))    // while the pin is high
 8000dca:	2108      	movs	r1, #8
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <hcsr04_read+0x70>)
 8000dce:	f001 fb21 	bl	8002414 <HAL_GPIO_ReadPin>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d1f0      	bne.n	8000dba <hcsr04_read+0x46>
  }
 return local_time;
 8000dd8:	4b01      	ldr	r3, [pc, #4]	; (8000de0 <hcsr04_read+0x6c>)
 8000dda:	681b      	ldr	r3, [r3, #0]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	200000a0 	.word	0x200000a0
 8000de4:	40020000 	.word	0x40020000

08000de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de8:	b598      	push	{r3, r4, r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dec:	f000 fc18 	bl	8001620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df0:	f000 f8a0 	bl	8000f34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df4:	f000 f992 	bl	800111c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000df8:	f000 f95a 	bl	80010b0 <MX_SPI1_Init>
  MX_ADC1_Init();
 8000dfc:	f000 f904 	bl	8001008 <MX_ADC1_Init>
  // HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, SET);
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_ADC_Start(&hadc1);
 8000e00:	4843      	ldr	r0, [pc, #268]	; (8000f10 <main+0x128>)
 8000e02:	f000 fce5 	bl	80017d0 <HAL_ADC_Start>
	  if(HAL_ADC_PollForConversion(&hadc1, 5) == HAL_OK);
 8000e06:	2105      	movs	r1, #5
 8000e08:	4841      	ldr	r0, [pc, #260]	; (8000f10 <main+0x128>)
 8000e0a:	f000 fda7 	bl	800195c <HAL_ADC_PollForConversion>
	  {
		  PotVal = HAL_ADC_GetValue(&hadc1);
 8000e0e:	4840      	ldr	r0, [pc, #256]	; (8000f10 <main+0x128>)
 8000e10:	f000 fe28 	bl	8001a64 <HAL_ADC_GetValue>
 8000e14:	4602      	mov	r2, r0
 8000e16:	4b3f      	ldr	r3, [pc, #252]	; (8000f14 <main+0x12c>)
 8000e18:	601a      	str	r2, [r3, #0]
		  HAL_Delay(50);
 8000e1a:	2032      	movs	r0, #50	; 0x32
 8000e1c:	f000 fc72 	bl	8001704 <HAL_Delay>
	  }

    /* USER CODE BEGIN 3 */
	  if(flag == 1)
 8000e20:	4b3d      	ldr	r3, [pc, #244]	; (8000f18 <main+0x130>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d158      	bne.n	8000eda <main+0xf2>
	  {
		  HAL_GPIO_WritePin(GreenLed_GPIO_Port, GreenLed_Pin, SET);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e2e:	483b      	ldr	r0, [pc, #236]	; (8000f1c <main+0x134>)
 8000e30:	f001 fb08 	bl	8002444 <HAL_GPIO_WritePin>
		  if(PotVal >= 512)
 8000e34:	4b37      	ldr	r3, [pc, #220]	; (8000f14 <main+0x12c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e3c:	d343      	bcc.n	8000ec6 <main+0xde>
		  {
			  delay(500);
 8000e3e:	20f4      	movs	r0, #244	; 0xf4
 8000e40:	f7ff ff84 	bl	8000d4c <delay>
			  //HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, RESET);
			  sensor_time = hcsr04_read();
 8000e44:	f7ff ff96 	bl	8000d74 <hcsr04_read>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	4b35      	ldr	r3, [pc, #212]	; (8000f20 <main+0x138>)
 8000e4c:	601a      	str	r2, [r3, #0]
			  distance  = sensor_time * .034/2;
 8000e4e:	4b34      	ldr	r3, [pc, #208]	; (8000f20 <main+0x138>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fb4e 	bl	80004f4 <__aeabi_ui2d>
 8000e58:	a32b      	add	r3, pc, #172	; (adr r3, 8000f08 <main+0x120>)
 8000e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e5e:	f7ff fbc3 	bl	80005e8 <__aeabi_dmul>
 8000e62:	4603      	mov	r3, r0
 8000e64:	460c      	mov	r4, r1
 8000e66:	4618      	mov	r0, r3
 8000e68:	4621      	mov	r1, r4
 8000e6a:	f04f 0200 	mov.w	r2, #0
 8000e6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e72:	f7ff fce3 	bl	800083c <__aeabi_ddiv>
 8000e76:	4603      	mov	r3, r0
 8000e78:	460c      	mov	r4, r1
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	4621      	mov	r1, r4
 8000e7e:	f7ff fdc5 	bl	8000a0c <__aeabi_d2uiz>
 8000e82:	4602      	mov	r2, r0
 8000e84:	4b27      	ldr	r3, [pc, #156]	; (8000f24 <main+0x13c>)
 8000e86:	601a      	str	r2, [r3, #0]
			  if(distance>0 && distance<4)
 8000e88:	4b26      	ldr	r3, [pc, #152]	; (8000f24 <main+0x13c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d00d      	beq.n	8000eac <main+0xc4>
 8000e90:	4b24      	ldr	r3, [pc, #144]	; (8000f24 <main+0x13c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b03      	cmp	r3, #3
 8000e96:	d809      	bhi.n	8000eac <main+0xc4>
			  {
				  HAL_GPIO_WritePin(RedLed_GPIO_Port, RedLed_Pin, SET);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e9e:	481f      	ldr	r0, [pc, #124]	; (8000f1c <main+0x134>)
 8000ea0:	f001 fad0 	bl	8002444 <HAL_GPIO_WritePin>
				  buffer = 1;
 8000ea4:	4b20      	ldr	r3, [pc, #128]	; (8000f28 <main+0x140>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	701a      	strb	r2, [r3, #0]
 8000eaa:	e008      	b.n	8000ebe <main+0xd6>
			  }
			  else
			  {
				  HAL_GPIO_WritePin(RedLed_GPIO_Port, RedLed_Pin, RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eb2:	481a      	ldr	r0, [pc, #104]	; (8000f1c <main+0x134>)
 8000eb4:	f001 fac6 	bl	8002444 <HAL_GPIO_WritePin>
				  buffer = 3;
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <main+0x140>)
 8000eba:	2203      	movs	r2, #3
 8000ebc:	701a      	strb	r2, [r3, #0]
			  }
			  delay(200);
 8000ebe:	20c8      	movs	r0, #200	; 0xc8
 8000ec0:	f7ff ff44 	bl	8000d4c <delay>
 8000ec4:	e015      	b.n	8000ef2 <main+0x10a>
		//	  buffer++;
			 // HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, SET);
		  }
		  else
		  {
			  buffer = 2;
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <main+0x140>)
 8000ec8:	2202      	movs	r2, #2
 8000eca:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(RedLed_GPIO_Port, RedLed_Pin, RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed2:	4812      	ldr	r0, [pc, #72]	; (8000f1c <main+0x134>)
 8000ed4:	f001 fab6 	bl	8002444 <HAL_GPIO_WritePin>
 8000ed8:	e00b      	b.n	8000ef2 <main+0x10a>
		  }

	  }
	  else
	  {
		  HAL_GPIO_WritePin(GreenLed_GPIO_Port, GreenLed_Pin, RESET);
 8000eda:	2200      	movs	r2, #0
 8000edc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee0:	480e      	ldr	r0, [pc, #56]	; (8000f1c <main+0x134>)
 8000ee2:	f001 faaf 	bl	8002444 <HAL_GPIO_WritePin>
		  buffer = 0;
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <main+0x140>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
		  printf("######\n");
 8000eec:	480f      	ldr	r0, [pc, #60]	; (8000f2c <main+0x144>)
 8000eee:	f002 f9f3 	bl	80032d8 <puts>
	  }

	  HAL_SPI_Transmit(&hspi1, &buffer, 1, 10);
 8000ef2:	230a      	movs	r3, #10
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	490c      	ldr	r1, [pc, #48]	; (8000f28 <main+0x140>)
 8000ef8:	480d      	ldr	r0, [pc, #52]	; (8000f30 <main+0x148>)
 8000efa:	f001 ff67 	bl	8002dcc <HAL_SPI_Transmit>
	  delay(10);
 8000efe:	200a      	movs	r0, #10
 8000f00:	f7ff ff24 	bl	8000d4c <delay>
	  HAL_ADC_Start(&hadc1);
 8000f04:	e77c      	b.n	8000e00 <main+0x18>
 8000f06:	bf00      	nop
 8000f08:	b020c49c 	.word	0xb020c49c
 8000f0c:	3fa16872 	.word	0x3fa16872
 8000f10:	200000a8 	.word	0x200000a8
 8000f14:	200000f0 	.word	0x200000f0
 8000f18:	2000008d 	.word	0x2000008d
 8000f1c:	40020c00 	.word	0x40020c00
 8000f20:	2000009c 	.word	0x2000009c
 8000f24:	200000a4 	.word	0x200000a4
 8000f28:	2000008c 	.word	0x2000008c
 8000f2c:	08004098 	.word	0x08004098
 8000f30:	200000f4 	.word	0x200000f4

08000f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b094      	sub	sp, #80	; 0x50
 8000f38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3a:	f107 0320 	add.w	r3, r7, #32
 8000f3e:	2230      	movs	r2, #48	; 0x30
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f002 f94c 	bl	80031e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	4b28      	ldr	r3, [pc, #160]	; (8001000 <SystemClock_Config+0xcc>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	4a27      	ldr	r2, [pc, #156]	; (8001000 <SystemClock_Config+0xcc>)
 8000f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f66:	6413      	str	r3, [r2, #64]	; 0x40
 8000f68:	4b25      	ldr	r3, [pc, #148]	; (8001000 <SystemClock_Config+0xcc>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f74:	2300      	movs	r3, #0
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	4b22      	ldr	r3, [pc, #136]	; (8001004 <SystemClock_Config+0xd0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a21      	ldr	r2, [pc, #132]	; (8001004 <SystemClock_Config+0xd0>)
 8000f7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <SystemClock_Config+0xd0>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f90:	2301      	movs	r3, #1
 8000f92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 8000f94:	2300      	movs	r3, #0
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f9c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fa2:	2308      	movs	r3, #8
 8000fa4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fa6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000faa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fac:	2302      	movs	r3, #2
 8000fae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fb0:	2307      	movs	r3, #7
 8000fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb4:	f107 0320 	add.w	r3, r7, #32
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f001 fa75 	bl	80024a8 <HAL_RCC_OscConfig>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fc4:	f000 f950 	bl	8001268 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc8:	230f      	movs	r3, #15
 8000fca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fd4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fde:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	2105      	movs	r1, #5
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f001 fcce 	bl	8002988 <HAL_RCC_ClockConfig>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ff2:	f000 f939 	bl	8001268 <Error_Handler>
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	3750      	adds	r7, #80	; 0x50
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800
 8001004:	40007000 	.word	0x40007000

08001008 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800100e:	463b      	mov	r3, r7
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800101a:	4b22      	ldr	r3, [pc, #136]	; (80010a4 <MX_ADC1_Init+0x9c>)
 800101c:	4a22      	ldr	r2, [pc, #136]	; (80010a8 <MX_ADC1_Init+0xa0>)
 800101e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001020:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <MX_ADC1_Init+0x9c>)
 8001022:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001026:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001028:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <MX_ADC1_Init+0x9c>)
 800102a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800102e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001030:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <MX_ADC1_Init+0x9c>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <MX_ADC1_Init+0x9c>)
 8001038:	2200      	movs	r2, #0
 800103a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <MX_ADC1_Init+0x9c>)
 800103e:	2200      	movs	r2, #0
 8001040:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001044:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <MX_ADC1_Init+0x9c>)
 8001046:	2200      	movs	r2, #0
 8001048:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800104a:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_ADC1_Init+0x9c>)
 800104c:	4a17      	ldr	r2, [pc, #92]	; (80010ac <MX_ADC1_Init+0xa4>)
 800104e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_ADC1_Init+0x9c>)
 8001052:	2200      	movs	r2, #0
 8001054:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <MX_ADC1_Init+0x9c>)
 8001058:	2201      	movs	r2, #1
 800105a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_ADC1_Init+0x9c>)
 800105e:	2200      	movs	r2, #0
 8001060:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_ADC1_Init+0x9c>)
 8001066:	2201      	movs	r2, #1
 8001068:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800106a:	480e      	ldr	r0, [pc, #56]	; (80010a4 <MX_ADC1_Init+0x9c>)
 800106c:	f000 fb6c 	bl	8001748 <HAL_ADC_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001076:	f000 f8f7 	bl	8001268 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800107a:	2302      	movs	r3, #2
 800107c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800107e:	2301      	movs	r3, #1
 8001080:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001082:	2302      	movs	r3, #2
 8001084:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	4806      	ldr	r0, [pc, #24]	; (80010a4 <MX_ADC1_Init+0x9c>)
 800108c:	f000 fcf8 	bl	8001a80 <HAL_ADC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001096:	f000 f8e7 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200000a8 	.word	0x200000a8
 80010a8:	40012000 	.word	0x40012000
 80010ac:	0f000001 	.word	0x0f000001

080010b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010b4:	4b17      	ldr	r3, [pc, #92]	; (8001114 <MX_SPI1_Init+0x64>)
 80010b6:	4a18      	ldr	r2, [pc, #96]	; (8001118 <MX_SPI1_Init+0x68>)
 80010b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ba:	4b16      	ldr	r3, [pc, #88]	; (8001114 <MX_SPI1_Init+0x64>)
 80010bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010c2:	4b14      	ldr	r3, [pc, #80]	; (8001114 <MX_SPI1_Init+0x64>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <MX_SPI1_Init+0x64>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_SPI1_Init+0x64>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <MX_SPI1_Init+0x64>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <MX_SPI1_Init+0x64>)
 80010dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <MX_SPI1_Init+0x64>)
 80010e4:	2210      	movs	r2, #16
 80010e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010e8:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <MX_SPI1_Init+0x64>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <MX_SPI1_Init+0x64>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <MX_SPI1_Init+0x64>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <MX_SPI1_Init+0x64>)
 80010fc:	220a      	movs	r2, #10
 80010fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001100:	4804      	ldr	r0, [pc, #16]	; (8001114 <MX_SPI1_Init+0x64>)
 8001102:	f001 fdff 	bl	8002d04 <HAL_SPI_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800110c:	f000 f8ac 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	200000f4 	.word	0x200000f4
 8001118:	40013000 	.word	0x40013000

0800111c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
 800112e:	60da      	str	r2, [r3, #12]
 8001130:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	4b33      	ldr	r3, [pc, #204]	; (8001204 <MX_GPIO_Init+0xe8>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a32      	ldr	r2, [pc, #200]	; (8001204 <MX_GPIO_Init+0xe8>)
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b30      	ldr	r3, [pc, #192]	; (8001204 <MX_GPIO_Init+0xe8>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0301 	and.w	r3, r3, #1
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
 8001152:	4b2c      	ldr	r3, [pc, #176]	; (8001204 <MX_GPIO_Init+0xe8>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a2b      	ldr	r2, [pc, #172]	; (8001204 <MX_GPIO_Init+0xe8>)
 8001158:	f043 0308 	orr.w	r3, r3, #8
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b29      	ldr	r3, [pc, #164]	; (8001204 <MX_GPIO_Init+0xe8>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0308 	and.w	r3, r3, #8
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trigger_Pin|SS_Pin, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	2112      	movs	r1, #18
 800116e:	4826      	ldr	r0, [pc, #152]	; (8001208 <MX_GPIO_Init+0xec>)
 8001170:	f001 f968 	bl	8002444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GreenLed_Pin|RedLed_Pin, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800117a:	4824      	ldr	r0, [pc, #144]	; (800120c <MX_GPIO_Init+0xf0>)
 800117c:	f001 f962 	bl	8002444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Switch_Pin */
  GPIO_InitStruct.Pin = Switch_Pin;
 8001180:	2301      	movs	r3, #1
 8001182:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001184:	4b22      	ldr	r3, [pc, #136]	; (8001210 <MX_GPIO_Init+0xf4>)
 8001186:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Switch_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	4619      	mov	r1, r3
 8001192:	481d      	ldr	r0, [pc, #116]	; (8001208 <MX_GPIO_Init+0xec>)
 8001194:	f000 ffa4 	bl	80020e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Trigger_Pin SS_Pin */
  GPIO_InitStruct.Pin = Trigger_Pin|SS_Pin;
 8001198:	2312      	movs	r3, #18
 800119a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119c:	2301      	movs	r3, #1
 800119e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	4619      	mov	r1, r3
 80011ae:	4816      	ldr	r0, [pc, #88]	; (8001208 <MX_GPIO_Init+0xec>)
 80011b0:	f000 ff96 	bl	80020e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_Pin */
  GPIO_InitStruct.Pin = Echo_Pin;
 80011b4:	2308      	movs	r3, #8
 80011b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011b8:	2300      	movs	r3, #0
 80011ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	4619      	mov	r1, r3
 80011c6:	4810      	ldr	r0, [pc, #64]	; (8001208 <MX_GPIO_Init+0xec>)
 80011c8:	f000 ff8a 	bl	80020e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GreenLed_Pin RedLed_Pin */
  GPIO_InitStruct.Pin = GreenLed_Pin|RedLed_Pin;
 80011cc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011de:	f107 030c 	add.w	r3, r7, #12
 80011e2:	4619      	mov	r1, r3
 80011e4:	4809      	ldr	r0, [pc, #36]	; (800120c <MX_GPIO_Init+0xf0>)
 80011e6:	f000 ff7b 	bl	80020e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	2006      	movs	r0, #6
 80011f0:	f000 ff3f 	bl	8002072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80011f4:	2006      	movs	r0, #6
 80011f6:	f000 ff58 	bl	80020aa <HAL_NVIC_EnableIRQ>

}
 80011fa:	bf00      	nop
 80011fc:	3720      	adds	r7, #32
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40020000 	.word	0x40020000
 800120c:	40020c00 	.word	0x40020c00
 8001210:	10110000 	.word	0x10110000

08001214 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	80fb      	strh	r3, [r7, #6]
	printf("*******\n");
 800121e:	480f      	ldr	r0, [pc, #60]	; (800125c <HAL_GPIO_EXTI_Callback+0x48>)
 8001220:	f002 f85a 	bl	80032d8 <puts>
	if(flag==0)
 8001224:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d103      	bne.n	8001234 <HAL_GPIO_EXTI_Callback+0x20>
	{
		flag=1;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <HAL_GPIO_EXTI_Callback+0x4c>)
 800122e:	2201      	movs	r2, #1
 8001230:	701a      	strb	r2, [r3, #0]
 8001232:	e006      	b.n	8001242 <HAL_GPIO_EXTI_Callback+0x2e>
	}
	else if(flag==1)
 8001234:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d102      	bne.n	8001242 <HAL_GPIO_EXTI_Callback+0x2e>
	{
		flag=0;
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <HAL_GPIO_EXTI_Callback+0x4c>)
 800123e:	2200      	movs	r2, #0
 8001240:	701a      	strb	r2, [r3, #0]
	}
	initialise_monitor_handles();
 8001242:	f000 f902 	bl	800144a <initialise_monitor_handles>
	printf("%u\n", flag);
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	4619      	mov	r1, r3
 800124c:	4805      	ldr	r0, [pc, #20]	; (8001264 <HAL_GPIO_EXTI_Callback+0x50>)
 800124e:	f001 ffcf 	bl	80031f0 <iprintf>

}
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	080040a0 	.word	0x080040a0
 8001260:	2000008d 	.word	0x2000008d
 8001264:	080040a8 	.word	0x080040a8

08001268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
	...

08001278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <HAL_MspInit+0x4c>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001286:	4a0f      	ldr	r2, [pc, #60]	; (80012c4 <HAL_MspInit+0x4c>)
 8001288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128c:	6453      	str	r3, [r2, #68]	; 0x44
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <HAL_MspInit+0x4c>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <HAL_MspInit+0x4c>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	4a08      	ldr	r2, [pc, #32]	; (80012c4 <HAL_MspInit+0x4c>)
 80012a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a8:	6413      	str	r3, [r2, #64]	; 0x40
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_MspInit+0x4c>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012b6:	2007      	movs	r0, #7
 80012b8:	f000 fed0 	bl	800205c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40023800 	.word	0x40023800

080012c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	f107 0314 	add.w	r3, r7, #20
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a17      	ldr	r2, [pc, #92]	; (8001344 <HAL_ADC_MspInit+0x7c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d127      	bne.n	800133a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	4b16      	ldr	r3, [pc, #88]	; (8001348 <HAL_ADC_MspInit+0x80>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	4a15      	ldr	r2, [pc, #84]	; (8001348 <HAL_ADC_MspInit+0x80>)
 80012f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012f8:	6453      	str	r3, [r2, #68]	; 0x44
 80012fa:	4b13      	ldr	r3, [pc, #76]	; (8001348 <HAL_ADC_MspInit+0x80>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001302:	613b      	str	r3, [r7, #16]
 8001304:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <HAL_ADC_MspInit+0x80>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <HAL_ADC_MspInit+0x80>)
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <HAL_ADC_MspInit+0x80>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = Pot_Pin;
 8001322:	2304      	movs	r3, #4
 8001324:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001326:	2303      	movs	r3, #3
 8001328:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Pot_GPIO_Port, &GPIO_InitStruct);
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4619      	mov	r1, r3
 8001334:	4805      	ldr	r0, [pc, #20]	; (800134c <HAL_ADC_MspInit+0x84>)
 8001336:	f000 fed3 	bl	80020e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800133a:	bf00      	nop
 800133c:	3728      	adds	r7, #40	; 0x28
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40012000 	.word	0x40012000
 8001348:	40023800 	.word	0x40023800
 800134c:	40020000 	.word	0x40020000

08001350 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	; 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a19      	ldr	r2, [pc, #100]	; (80013d4 <HAL_SPI_MspInit+0x84>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d12b      	bne.n	80013ca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <HAL_SPI_MspInit+0x88>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	4a17      	ldr	r2, [pc, #92]	; (80013d8 <HAL_SPI_MspInit+0x88>)
 800137c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001380:	6453      	str	r3, [r2, #68]	; 0x44
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_SPI_MspInit+0x88>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <HAL_SPI_MspInit+0x88>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a10      	ldr	r2, [pc, #64]	; (80013d8 <HAL_SPI_MspInit+0x88>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <HAL_SPI_MspInit+0x88>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013aa:	23e0      	movs	r3, #224	; 0xe0
 80013ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b6:	2303      	movs	r3, #3
 80013b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013ba:	2305      	movs	r3, #5
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	4619      	mov	r1, r3
 80013c4:	4805      	ldr	r0, [pc, #20]	; (80013dc <HAL_SPI_MspInit+0x8c>)
 80013c6:	f000 fe8b 	bl	80020e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80013ca:	bf00      	nop
 80013cc:	3728      	adds	r7, #40	; 0x28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40013000 	.word	0x40013000
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020000 	.word	0x40020000

080013e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <HardFault_Handler+0x4>

080013f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <MemManage_Handler+0x4>

080013fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <BusFault_Handler+0x4>

08001400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <UsageFault_Handler+0x4>

08001406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001434:	f000 f946 	bl	80016c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}

0800143c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001440:	2001      	movs	r0, #1
 8001442:	f001 f819 	bl	8002478 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}

0800144a <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]
 8001468:	e00a      	b.n	8001480 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800146a:	f3af 8000 	nop.w
 800146e:	4601      	mov	r1, r0
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	60ba      	str	r2, [r7, #8]
 8001476:	b2ca      	uxtb	r2, r1
 8001478:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	3301      	adds	r3, #1
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	697a      	ldr	r2, [r7, #20]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	429a      	cmp	r2, r3
 8001486:	dbf0      	blt.n	800146a <_read+0x12>
	}

return len;
 8001488:	687b      	ldr	r3, [r7, #4]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	e009      	b.n	80014b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	1c5a      	adds	r2, r3, #1
 80014a8:	60ba      	str	r2, [r7, #8]
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	3301      	adds	r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	429a      	cmp	r2, r3
 80014be:	dbf1      	blt.n	80014a4 <_write+0x12>
	}
	return len;
 80014c0:	687b      	ldr	r3, [r7, #4]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <_close>:

int _close(int file)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
	return -1;
 80014d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014f2:	605a      	str	r2, [r3, #4]
	return 0;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr

08001502 <_isatty>:

int _isatty(int file)
{
 8001502:	b480      	push	{r7}
 8001504:	b083      	sub	sp, #12
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
	return 1;
 800150a:	2301      	movs	r3, #1
}
 800150c:	4618      	mov	r0, r3
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
	return 0;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800153c:	4a14      	ldr	r2, [pc, #80]	; (8001590 <_sbrk+0x5c>)
 800153e:	4b15      	ldr	r3, [pc, #84]	; (8001594 <_sbrk+0x60>)
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001548:	4b13      	ldr	r3, [pc, #76]	; (8001598 <_sbrk+0x64>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d102      	bne.n	8001556 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <_sbrk+0x64>)
 8001552:	4a12      	ldr	r2, [pc, #72]	; (800159c <_sbrk+0x68>)
 8001554:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <_sbrk+0x64>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	429a      	cmp	r2, r3
 8001562:	d207      	bcs.n	8001574 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001564:	f001 fe12 	bl	800318c <__errno>
 8001568:	4602      	mov	r2, r0
 800156a:	230c      	movs	r3, #12
 800156c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800156e:	f04f 33ff 	mov.w	r3, #4294967295
 8001572:	e009      	b.n	8001588 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <_sbrk+0x64>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800157a:	4b07      	ldr	r3, [pc, #28]	; (8001598 <_sbrk+0x64>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	4a05      	ldr	r2, [pc, #20]	; (8001598 <_sbrk+0x64>)
 8001584:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001586:	68fb      	ldr	r3, [r7, #12]
}
 8001588:	4618      	mov	r0, r3
 800158a:	3718      	adds	r7, #24
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20020000 	.word	0x20020000
 8001594:	00000400 	.word	0x00000400
 8001598:	20000090 	.word	0x20000090
 800159c:	20000158 	.word	0x20000158

080015a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <SystemInit+0x28>)
 80015a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015aa:	4a07      	ldr	r2, [pc, #28]	; (80015c8 <SystemInit+0x28>)
 80015ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <SystemInit+0x28>)
 80015b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015ba:	609a      	str	r2, [r3, #8]
#endif
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001604 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80015d0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80015d2:	e003      	b.n	80015dc <LoopCopyDataInit>

080015d4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80015d6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80015d8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80015da:	3104      	adds	r1, #4

080015dc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80015dc:	480b      	ldr	r0, [pc, #44]	; (800160c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80015de:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80015e0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80015e2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80015e4:	d3f6      	bcc.n	80015d4 <CopyDataInit>
  ldr  r2, =_sbss
 80015e6:	4a0b      	ldr	r2, [pc, #44]	; (8001614 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80015e8:	e002      	b.n	80015f0 <LoopFillZerobss>

080015ea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80015ea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80015ec:	f842 3b04 	str.w	r3, [r2], #4

080015f0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80015f2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015f4:	d3f9      	bcc.n	80015ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015f6:	f7ff ffd3 	bl	80015a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015fa:	f001 fdcd 	bl	8003198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015fe:	f7ff fbf3 	bl	8000de8 <main>
  bx  lr    
 8001602:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001604:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001608:	08004164 	.word	0x08004164
  ldr  r0, =_sdata
 800160c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001610:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001614:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001618:	20000154 	.word	0x20000154

0800161c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800161c:	e7fe      	b.n	800161c <ADC_IRQHandler>
	...

08001620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001624:	4b0e      	ldr	r3, [pc, #56]	; (8001660 <HAL_Init+0x40>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a0d      	ldr	r2, [pc, #52]	; (8001660 <HAL_Init+0x40>)
 800162a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800162e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001630:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_Init+0x40>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <HAL_Init+0x40>)
 8001636:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800163a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800163c:	4b08      	ldr	r3, [pc, #32]	; (8001660 <HAL_Init+0x40>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a07      	ldr	r2, [pc, #28]	; (8001660 <HAL_Init+0x40>)
 8001642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001646:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001648:	2003      	movs	r0, #3
 800164a:	f000 fd07 	bl	800205c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800164e:	2000      	movs	r0, #0
 8001650:	f000 f808 	bl	8001664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001654:	f7ff fe10 	bl	8001278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40023c00 	.word	0x40023c00

08001664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_InitTick+0x54>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b12      	ldr	r3, [pc, #72]	; (80016bc <HAL_InitTick+0x58>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167a:	fbb3 f3f1 	udiv	r3, r3, r1
 800167e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f000 fd1f 	bl	80020c6 <HAL_SYSTICK_Config>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e00e      	b.n	80016b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b0f      	cmp	r3, #15
 8001696:	d80a      	bhi.n	80016ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001698:	2200      	movs	r2, #0
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	f04f 30ff 	mov.w	r0, #4294967295
 80016a0:	f000 fce7 	bl	8002072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016a4:	4a06      	ldr	r2, [pc, #24]	; (80016c0 <HAL_InitTick+0x5c>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	e000      	b.n	80016b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000000 	.word	0x20000000
 80016bc:	20000008 	.word	0x20000008
 80016c0:	20000004 	.word	0x20000004

080016c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_IncTick+0x20>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	461a      	mov	r2, r3
 80016ce:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <HAL_IncTick+0x24>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <HAL_IncTick+0x24>)
 80016d6:	6013      	str	r3, [r2, #0]
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000008 	.word	0x20000008
 80016e8:	2000014c 	.word	0x2000014c

080016ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return uwTick;
 80016f0:	4b03      	ldr	r3, [pc, #12]	; (8001700 <HAL_GetTick+0x14>)
 80016f2:	681b      	ldr	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	2000014c 	.word	0x2000014c

08001704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800170c:	f7ff ffee 	bl	80016ec <HAL_GetTick>
 8001710:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800171c:	d005      	beq.n	800172a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <HAL_Delay+0x40>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4413      	add	r3, r2
 8001728:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800172a:	bf00      	nop
 800172c:	f7ff ffde 	bl	80016ec <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	429a      	cmp	r2, r3
 800173a:	d8f7      	bhi.n	800172c <HAL_Delay+0x28>
  {
  }
}
 800173c:	bf00      	nop
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000008 	.word	0x20000008

08001748 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001750:	2300      	movs	r3, #0
 8001752:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e033      	b.n	80017c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	2b00      	cmp	r3, #0
 8001764:	d109      	bne.n	800177a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff fdae 	bl	80012c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	2b00      	cmp	r3, #0
 8001784:	d118      	bne.n	80017b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800178e:	f023 0302 	bic.w	r3, r3, #2
 8001792:	f043 0202 	orr.w	r2, r3, #2
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 fa92 	bl	8001cc4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2200      	movs	r2, #0
 80017a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	f023 0303 	bic.w	r3, r3, #3
 80017ae:	f043 0201 	orr.w	r2, r3, #1
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	641a      	str	r2, [r3, #64]	; 0x40
 80017b6:	e001      	b.n	80017bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
	...

080017d0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d101      	bne.n	80017ea <HAL_ADC_Start+0x1a>
 80017e6:	2302      	movs	r3, #2
 80017e8:	e0a5      	b.n	8001936 <HAL_ADC_Start+0x166>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d018      	beq.n	8001832 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0201 	orr.w	r2, r2, #1
 800180e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001810:	4b4c      	ldr	r3, [pc, #304]	; (8001944 <HAL_ADC_Start+0x174>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a4c      	ldr	r2, [pc, #304]	; (8001948 <HAL_ADC_Start+0x178>)
 8001816:	fba2 2303 	umull	r2, r3, r2, r3
 800181a:	0c9a      	lsrs	r2, r3, #18
 800181c:	4613      	mov	r3, r2
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	4413      	add	r3, r2
 8001822:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001824:	e002      	b.n	800182c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	3b01      	subs	r3, #1
 800182a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f9      	bne.n	8001826 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b01      	cmp	r3, #1
 800183e:	d179      	bne.n	8001934 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001848:	f023 0301 	bic.w	r3, r3, #1
 800184c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800185e:	2b00      	cmp	r3, #0
 8001860:	d007      	beq.n	8001872 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800186a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001876:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800187a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800187e:	d106      	bne.n	800188e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001884:	f023 0206 	bic.w	r2, r3, #6
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	645a      	str	r2, [r3, #68]	; 0x44
 800188c:	e002      	b.n	8001894 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800189c:	4b2b      	ldr	r3, [pc, #172]	; (800194c <HAL_ADC_Start+0x17c>)
 800189e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018a8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 031f 	and.w	r3, r3, #31
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d12a      	bne.n	800190c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a25      	ldr	r2, [pc, #148]	; (8001950 <HAL_ADC_Start+0x180>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d015      	beq.n	80018ec <HAL_ADC_Start+0x11c>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a23      	ldr	r2, [pc, #140]	; (8001954 <HAL_ADC_Start+0x184>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d105      	bne.n	80018d6 <HAL_ADC_Start+0x106>
 80018ca:	4b20      	ldr	r3, [pc, #128]	; (800194c <HAL_ADC_Start+0x17c>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f003 031f 	and.w	r3, r3, #31
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00a      	beq.n	80018ec <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a1f      	ldr	r2, [pc, #124]	; (8001958 <HAL_ADC_Start+0x188>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d129      	bne.n	8001934 <HAL_ADC_Start+0x164>
 80018e0:	4b1a      	ldr	r3, [pc, #104]	; (800194c <HAL_ADC_Start+0x17c>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 031f 	and.w	r3, r3, #31
 80018e8:	2b0f      	cmp	r3, #15
 80018ea:	d823      	bhi.n	8001934 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d11c      	bne.n	8001934 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001908:	609a      	str	r2, [r3, #8]
 800190a:	e013      	b.n	8001934 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a0f      	ldr	r2, [pc, #60]	; (8001950 <HAL_ADC_Start+0x180>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d10e      	bne.n	8001934 <HAL_ADC_Start+0x164>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d107      	bne.n	8001934 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	689a      	ldr	r2, [r3, #8]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001932:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000000 	.word	0x20000000
 8001948:	431bde83 	.word	0x431bde83
 800194c:	40012300 	.word	0x40012300
 8001950:	40012000 	.word	0x40012000
 8001954:	40012100 	.word	0x40012100
 8001958:	40012200 	.word	0x40012200

0800195c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001978:	d113      	bne.n	80019a2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001984:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001988:	d10b      	bne.n	80019a2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f043 0220 	orr.w	r2, r3, #32
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e05c      	b.n	8001a5c <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80019a2:	f7ff fea3 	bl	80016ec <HAL_GetTick>
 80019a6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019a8:	e01a      	b.n	80019e0 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b0:	d016      	beq.n	80019e0 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d007      	beq.n	80019c8 <HAL_ADC_PollForConversion+0x6c>
 80019b8:	f7ff fe98 	bl	80016ec <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d20b      	bcs.n	80019e0 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	f043 0204 	orr.w	r2, r3, #4
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e03d      	b.n	8001a5c <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d1dd      	bne.n	80019aa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f06f 0212 	mvn.w	r2, #18
 80019f6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d123      	bne.n	8001a5a <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d11f      	bne.n	8001a5a <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a20:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d006      	beq.n	8001a36 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d111      	bne.n	8001a5a <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d105      	bne.n	8001a5a <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f043 0201 	orr.w	r2, r3, #1
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3710      	adds	r7, #16
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d101      	bne.n	8001a9c <HAL_ADC_ConfigChannel+0x1c>
 8001a98:	2302      	movs	r3, #2
 8001a9a:	e105      	b.n	8001ca8 <HAL_ADC_ConfigChannel+0x228>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b09      	cmp	r3, #9
 8001aaa:	d925      	bls.n	8001af8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68d9      	ldr	r1, [r3, #12]
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4613      	mov	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	4413      	add	r3, r2
 8001ac0:	3b1e      	subs	r3, #30
 8001ac2:	2207      	movs	r2, #7
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43da      	mvns	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	400a      	ands	r2, r1
 8001ad0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	68d9      	ldr	r1, [r3, #12]
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	4403      	add	r3, r0
 8001aea:	3b1e      	subs	r3, #30
 8001aec:	409a      	lsls	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	e022      	b.n	8001b3e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6919      	ldr	r1, [r3, #16]
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	461a      	mov	r2, r3
 8001b06:	4613      	mov	r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	2207      	movs	r2, #7
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43da      	mvns	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	400a      	ands	r2, r1
 8001b1a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6919      	ldr	r1, [r3, #16]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	4603      	mov	r3, r0
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	4403      	add	r3, r0
 8001b34:	409a      	lsls	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	2b06      	cmp	r3, #6
 8001b44:	d824      	bhi.n	8001b90 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	3b05      	subs	r3, #5
 8001b58:	221f      	movs	r2, #31
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	43da      	mvns	r2, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	400a      	ands	r2, r1
 8001b66:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	4618      	mov	r0, r3
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	4413      	add	r3, r2
 8001b80:	3b05      	subs	r3, #5
 8001b82:	fa00 f203 	lsl.w	r2, r0, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b8e:	e04c      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b0c      	cmp	r3, #12
 8001b96:	d824      	bhi.n	8001be2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	3b23      	subs	r3, #35	; 0x23
 8001baa:	221f      	movs	r2, #31
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43da      	mvns	r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	400a      	ands	r2, r1
 8001bb8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	3b23      	subs	r3, #35	; 0x23
 8001bd4:	fa00 f203 	lsl.w	r2, r0, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	631a      	str	r2, [r3, #48]	; 0x30
 8001be0:	e023      	b.n	8001c2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4413      	add	r3, r2
 8001bf2:	3b41      	subs	r3, #65	; 0x41
 8001bf4:	221f      	movs	r2, #31
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	400a      	ands	r2, r1
 8001c02:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	4618      	mov	r0, r3
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3b41      	subs	r3, #65	; 0x41
 8001c1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	430a      	orrs	r2, r1
 8001c28:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c2a:	4b22      	ldr	r3, [pc, #136]	; (8001cb4 <HAL_ADC_ConfigChannel+0x234>)
 8001c2c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a21      	ldr	r2, [pc, #132]	; (8001cb8 <HAL_ADC_ConfigChannel+0x238>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d109      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x1cc>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b12      	cmp	r3, #18
 8001c3e:	d105      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a19      	ldr	r2, [pc, #100]	; (8001cb8 <HAL_ADC_ConfigChannel+0x238>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d123      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x21e>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2b10      	cmp	r3, #16
 8001c5c:	d003      	beq.n	8001c66 <HAL_ADC_ConfigChannel+0x1e6>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2b11      	cmp	r3, #17
 8001c64:	d11b      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b10      	cmp	r3, #16
 8001c78:	d111      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <HAL_ADC_ConfigChannel+0x23c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a10      	ldr	r2, [pc, #64]	; (8001cc0 <HAL_ADC_ConfigChannel+0x240>)
 8001c80:	fba2 2303 	umull	r2, r3, r2, r3
 8001c84:	0c9a      	lsrs	r2, r3, #18
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c90:	e002      	b.n	8001c98 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	3b01      	subs	r3, #1
 8001c96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f9      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	40012300 	.word	0x40012300
 8001cb8:	40012000 	.word	0x40012000
 8001cbc:	20000000 	.word	0x20000000
 8001cc0:	431bde83 	.word	0x431bde83

08001cc4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ccc:	4b79      	ldr	r3, [pc, #484]	; (8001eb4 <ADC_Init+0x1f0>)
 8001cce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cf8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6859      	ldr	r1, [r3, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	021a      	lsls	r2, r3, #8
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001d1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6859      	ldr	r1, [r3, #4]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	689a      	ldr	r2, [r3, #8]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6899      	ldr	r1, [r3, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68da      	ldr	r2, [r3, #12]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d56:	4a58      	ldr	r2, [pc, #352]	; (8001eb8 <ADC_Init+0x1f4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d022      	beq.n	8001da2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001d6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6899      	ldr	r1, [r3, #8]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6899      	ldr	r1, [r3, #8]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	e00f      	b.n	8001dc2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001db0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dc0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0202 	bic.w	r2, r2, #2
 8001dd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6899      	ldr	r1, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	7e1b      	ldrb	r3, [r3, #24]
 8001ddc:	005a      	lsls	r2, r3, #1
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d01b      	beq.n	8001e28 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dfe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001e0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6859      	ldr	r1, [r3, #4]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	035a      	lsls	r2, r3, #13
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	e007      	b.n	8001e38 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001e46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	051a      	lsls	r2, r3, #20
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6899      	ldr	r1, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e7a:	025a      	lsls	r2, r3, #9
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6899      	ldr	r1, [r3, #8]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	029a      	lsls	r2, r3, #10
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	609a      	str	r2, [r3, #8]
}
 8001ea8:	bf00      	nop
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	40012300 	.word	0x40012300
 8001eb8:	0f000001 	.word	0x0f000001

08001ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eee:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	60d3      	str	r3, [r2, #12]
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f08:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <__NVIC_GetPriorityGrouping+0x18>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	0a1b      	lsrs	r3, r3, #8
 8001f0e:	f003 0307 	and.w	r3, r3, #7
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	db0b      	blt.n	8001f4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	f003 021f 	and.w	r2, r3, #31
 8001f38:	4907      	ldr	r1, [pc, #28]	; (8001f58 <__NVIC_EnableIRQ+0x38>)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	095b      	lsrs	r3, r3, #5
 8001f40:	2001      	movs	r0, #1
 8001f42:	fa00 f202 	lsl.w	r2, r0, r2
 8001f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000e100 	.word	0xe000e100

08001f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	6039      	str	r1, [r7, #0]
 8001f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	db0a      	blt.n	8001f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	490c      	ldr	r1, [pc, #48]	; (8001fa8 <__NVIC_SetPriority+0x4c>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	0112      	lsls	r2, r2, #4
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	440b      	add	r3, r1
 8001f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f84:	e00a      	b.n	8001f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4908      	ldr	r1, [pc, #32]	; (8001fac <__NVIC_SetPriority+0x50>)
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	3b04      	subs	r3, #4
 8001f94:	0112      	lsls	r2, r2, #4
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	440b      	add	r3, r1
 8001f9a:	761a      	strb	r2, [r3, #24]
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	e000e100 	.word	0xe000e100
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b089      	sub	sp, #36	; 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f1c3 0307 	rsb	r3, r3, #7
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	bf28      	it	cs
 8001fce:	2304      	movcs	r3, #4
 8001fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d902      	bls.n	8001fe0 <NVIC_EncodePriority+0x30>
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3b03      	subs	r3, #3
 8001fde:	e000      	b.n	8001fe2 <NVIC_EncodePriority+0x32>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8002002:	43d9      	mvns	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002008:	4313      	orrs	r3, r2
         );
}
 800200a:	4618      	mov	r0, r3
 800200c:	3724      	adds	r7, #36	; 0x24
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3b01      	subs	r3, #1
 8002024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002028:	d301      	bcc.n	800202e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800202a:	2301      	movs	r3, #1
 800202c:	e00f      	b.n	800204e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800202e:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <SysTick_Config+0x40>)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3b01      	subs	r3, #1
 8002034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002036:	210f      	movs	r1, #15
 8002038:	f04f 30ff 	mov.w	r0, #4294967295
 800203c:	f7ff ff8e 	bl	8001f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002040:	4b05      	ldr	r3, [pc, #20]	; (8002058 <SysTick_Config+0x40>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002046:	4b04      	ldr	r3, [pc, #16]	; (8002058 <SysTick_Config+0x40>)
 8002048:	2207      	movs	r2, #7
 800204a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	e000e010 	.word	0xe000e010

0800205c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ff29 	bl	8001ebc <__NVIC_SetPriorityGrouping>
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002072:	b580      	push	{r7, lr}
 8002074:	b086      	sub	sp, #24
 8002076:	af00      	add	r7, sp, #0
 8002078:	4603      	mov	r3, r0
 800207a:	60b9      	str	r1, [r7, #8]
 800207c:	607a      	str	r2, [r7, #4]
 800207e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002084:	f7ff ff3e 	bl	8001f04 <__NVIC_GetPriorityGrouping>
 8002088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	68b9      	ldr	r1, [r7, #8]
 800208e:	6978      	ldr	r0, [r7, #20]
 8002090:	f7ff ff8e 	bl	8001fb0 <NVIC_EncodePriority>
 8002094:	4602      	mov	r2, r0
 8002096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800209a:	4611      	mov	r1, r2
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff ff5d 	bl	8001f5c <__NVIC_SetPriority>
}
 80020a2:	bf00      	nop
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b082      	sub	sp, #8
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4603      	mov	r3, r0
 80020b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff31 	bl	8001f20 <__NVIC_EnableIRQ>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff ffa2 	bl	8002018 <SysTick_Config>
 80020d4:	4603      	mov	r3, r0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b089      	sub	sp, #36	; 0x24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
 80020fa:	e16b      	b.n	80023d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020fc:	2201      	movs	r2, #1
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	4013      	ands	r3, r2
 800210e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	429a      	cmp	r2, r3
 8002116:	f040 815a 	bne.w	80023ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d00b      	beq.n	800213a <HAL_GPIO_Init+0x5a>
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b02      	cmp	r3, #2
 8002128:	d007      	beq.n	800213a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800212e:	2b11      	cmp	r3, #17
 8002130:	d003      	beq.n	800213a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b12      	cmp	r3, #18
 8002138:	d130      	bne.n	800219c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	2203      	movs	r2, #3
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4313      	orrs	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002170:	2201      	movs	r2, #1
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	091b      	lsrs	r3, r3, #4
 8002186:	f003 0201 	and.w	r2, r3, #1
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	2203      	movs	r2, #3
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d003      	beq.n	80021dc <HAL_GPIO_Init+0xfc>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b12      	cmp	r3, #18
 80021da:	d123      	bne.n	8002224 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	08da      	lsrs	r2, r3, #3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3208      	adds	r2, #8
 80021e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	220f      	movs	r2, #15
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	08da      	lsrs	r2, r3, #3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3208      	adds	r2, #8
 800221e:	69b9      	ldr	r1, [r7, #24]
 8002220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	2203      	movs	r2, #3
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 0203 	and.w	r2, r3, #3
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4313      	orrs	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 80b4 	beq.w	80023ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	4b5f      	ldr	r3, [pc, #380]	; (80023e8 <HAL_GPIO_Init+0x308>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	4a5e      	ldr	r2, [pc, #376]	; (80023e8 <HAL_GPIO_Init+0x308>)
 8002270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002274:	6453      	str	r3, [r2, #68]	; 0x44
 8002276:	4b5c      	ldr	r3, [pc, #368]	; (80023e8 <HAL_GPIO_Init+0x308>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002282:	4a5a      	ldr	r2, [pc, #360]	; (80023ec <HAL_GPIO_Init+0x30c>)
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	089b      	lsrs	r3, r3, #2
 8002288:	3302      	adds	r3, #2
 800228a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	220f      	movs	r2, #15
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a51      	ldr	r2, [pc, #324]	; (80023f0 <HAL_GPIO_Init+0x310>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d02b      	beq.n	8002306 <HAL_GPIO_Init+0x226>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a50      	ldr	r2, [pc, #320]	; (80023f4 <HAL_GPIO_Init+0x314>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d025      	beq.n	8002302 <HAL_GPIO_Init+0x222>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a4f      	ldr	r2, [pc, #316]	; (80023f8 <HAL_GPIO_Init+0x318>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d01f      	beq.n	80022fe <HAL_GPIO_Init+0x21e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a4e      	ldr	r2, [pc, #312]	; (80023fc <HAL_GPIO_Init+0x31c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d019      	beq.n	80022fa <HAL_GPIO_Init+0x21a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a4d      	ldr	r2, [pc, #308]	; (8002400 <HAL_GPIO_Init+0x320>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d013      	beq.n	80022f6 <HAL_GPIO_Init+0x216>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a4c      	ldr	r2, [pc, #304]	; (8002404 <HAL_GPIO_Init+0x324>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d00d      	beq.n	80022f2 <HAL_GPIO_Init+0x212>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a4b      	ldr	r2, [pc, #300]	; (8002408 <HAL_GPIO_Init+0x328>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d007      	beq.n	80022ee <HAL_GPIO_Init+0x20e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a4a      	ldr	r2, [pc, #296]	; (800240c <HAL_GPIO_Init+0x32c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d101      	bne.n	80022ea <HAL_GPIO_Init+0x20a>
 80022e6:	2307      	movs	r3, #7
 80022e8:	e00e      	b.n	8002308 <HAL_GPIO_Init+0x228>
 80022ea:	2308      	movs	r3, #8
 80022ec:	e00c      	b.n	8002308 <HAL_GPIO_Init+0x228>
 80022ee:	2306      	movs	r3, #6
 80022f0:	e00a      	b.n	8002308 <HAL_GPIO_Init+0x228>
 80022f2:	2305      	movs	r3, #5
 80022f4:	e008      	b.n	8002308 <HAL_GPIO_Init+0x228>
 80022f6:	2304      	movs	r3, #4
 80022f8:	e006      	b.n	8002308 <HAL_GPIO_Init+0x228>
 80022fa:	2303      	movs	r3, #3
 80022fc:	e004      	b.n	8002308 <HAL_GPIO_Init+0x228>
 80022fe:	2302      	movs	r3, #2
 8002300:	e002      	b.n	8002308 <HAL_GPIO_Init+0x228>
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <HAL_GPIO_Init+0x228>
 8002306:	2300      	movs	r3, #0
 8002308:	69fa      	ldr	r2, [r7, #28]
 800230a:	f002 0203 	and.w	r2, r2, #3
 800230e:	0092      	lsls	r2, r2, #2
 8002310:	4093      	lsls	r3, r2
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002318:	4934      	ldr	r1, [pc, #208]	; (80023ec <HAL_GPIO_Init+0x30c>)
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	089b      	lsrs	r3, r3, #2
 800231e:	3302      	adds	r3, #2
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002326:	4b3a      	ldr	r3, [pc, #232]	; (8002410 <HAL_GPIO_Init+0x330>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	43db      	mvns	r3, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4013      	ands	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800234a:	4a31      	ldr	r2, [pc, #196]	; (8002410 <HAL_GPIO_Init+0x330>)
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002350:	4b2f      	ldr	r3, [pc, #188]	; (8002410 <HAL_GPIO_Init+0x330>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002374:	4a26      	ldr	r2, [pc, #152]	; (8002410 <HAL_GPIO_Init+0x330>)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800237a:	4b25      	ldr	r3, [pc, #148]	; (8002410 <HAL_GPIO_Init+0x330>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	43db      	mvns	r3, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4013      	ands	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800239e:	4a1c      	ldr	r2, [pc, #112]	; (8002410 <HAL_GPIO_Init+0x330>)
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023a4:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <HAL_GPIO_Init+0x330>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023c8:	4a11      	ldr	r2, [pc, #68]	; (8002410 <HAL_GPIO_Init+0x330>)
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3301      	adds	r3, #1
 80023d2:	61fb      	str	r3, [r7, #28]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	2b0f      	cmp	r3, #15
 80023d8:	f67f ae90 	bls.w	80020fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023dc:	bf00      	nop
 80023de:	3724      	adds	r7, #36	; 0x24
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	40023800 	.word	0x40023800
 80023ec:	40013800 	.word	0x40013800
 80023f0:	40020000 	.word	0x40020000
 80023f4:	40020400 	.word	0x40020400
 80023f8:	40020800 	.word	0x40020800
 80023fc:	40020c00 	.word	0x40020c00
 8002400:	40021000 	.word	0x40021000
 8002404:	40021400 	.word	0x40021400
 8002408:	40021800 	.word	0x40021800
 800240c:	40021c00 	.word	0x40021c00
 8002410:	40013c00 	.word	0x40013c00

08002414 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	887b      	ldrh	r3, [r7, #2]
 8002426:	4013      	ands	r3, r2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d002      	beq.n	8002432 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800242c:	2301      	movs	r3, #1
 800242e:	73fb      	strb	r3, [r7, #15]
 8002430:	e001      	b.n	8002436 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002432:	2300      	movs	r3, #0
 8002434:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002436:	7bfb      	ldrb	r3, [r7, #15]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	807b      	strh	r3, [r7, #2]
 8002450:	4613      	mov	r3, r2
 8002452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002454:	787b      	ldrb	r3, [r7, #1]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800245a:	887a      	ldrh	r2, [r7, #2]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002460:	e003      	b.n	800246a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002462:	887b      	ldrh	r3, [r7, #2]
 8002464:	041a      	lsls	r2, r3, #16
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	619a      	str	r2, [r3, #24]
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
	...

08002478 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002482:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002484:	695a      	ldr	r2, [r3, #20]
 8002486:	88fb      	ldrh	r3, [r7, #6]
 8002488:	4013      	ands	r3, r2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d006      	beq.n	800249c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800248e:	4a05      	ldr	r2, [pc, #20]	; (80024a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002494:	88fb      	ldrh	r3, [r7, #6]
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe febc 	bl	8001214 <HAL_GPIO_EXTI_Callback>
  }
}
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40013c00 	.word	0x40013c00

080024a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e25b      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d075      	beq.n	80025b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024c6:	4ba3      	ldr	r3, [pc, #652]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b04      	cmp	r3, #4
 80024d0:	d00c      	beq.n	80024ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024d2:	4ba0      	ldr	r3, [pc, #640]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d112      	bne.n	8002504 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024de:	4b9d      	ldr	r3, [pc, #628]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024ea:	d10b      	bne.n	8002504 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ec:	4b99      	ldr	r3, [pc, #612]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d05b      	beq.n	80025b0 <HAL_RCC_OscConfig+0x108>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d157      	bne.n	80025b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e236      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800250c:	d106      	bne.n	800251c <HAL_RCC_OscConfig+0x74>
 800250e:	4b91      	ldr	r3, [pc, #580]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a90      	ldr	r2, [pc, #576]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e01d      	b.n	8002558 <HAL_RCC_OscConfig+0xb0>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002524:	d10c      	bne.n	8002540 <HAL_RCC_OscConfig+0x98>
 8002526:	4b8b      	ldr	r3, [pc, #556]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a8a      	ldr	r2, [pc, #552]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 800252c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	4b88      	ldr	r3, [pc, #544]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a87      	ldr	r2, [pc, #540]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	e00b      	b.n	8002558 <HAL_RCC_OscConfig+0xb0>
 8002540:	4b84      	ldr	r3, [pc, #528]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a83      	ldr	r2, [pc, #524]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	4b81      	ldr	r3, [pc, #516]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a80      	ldr	r2, [pc, #512]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002552:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002556:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d013      	beq.n	8002588 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7ff f8c4 	bl	80016ec <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002568:	f7ff f8c0 	bl	80016ec <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b64      	cmp	r3, #100	; 0x64
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e1fb      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800257a:	4b76      	ldr	r3, [pc, #472]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0xc0>
 8002586:	e014      	b.n	80025b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7ff f8b0 	bl	80016ec <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002590:	f7ff f8ac 	bl	80016ec <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	; 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e1e7      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025a2:	4b6c      	ldr	r3, [pc, #432]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0xe8>
 80025ae:	e000      	b.n	80025b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d063      	beq.n	8002686 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025be:	4b65      	ldr	r3, [pc, #404]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00b      	beq.n	80025e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ca:	4b62      	ldr	r3, [pc, #392]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025d2:	2b08      	cmp	r3, #8
 80025d4:	d11c      	bne.n	8002610 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025d6:	4b5f      	ldr	r3, [pc, #380]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d116      	bne.n	8002610 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e2:	4b5c      	ldr	r3, [pc, #368]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d005      	beq.n	80025fa <HAL_RCC_OscConfig+0x152>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d001      	beq.n	80025fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e1bb      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025fa:	4b56      	ldr	r3, [pc, #344]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4952      	ldr	r1, [pc, #328]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 800260a:	4313      	orrs	r3, r2
 800260c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260e:	e03a      	b.n	8002686 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d020      	beq.n	800265a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002618:	4b4f      	ldr	r3, [pc, #316]	; (8002758 <HAL_RCC_OscConfig+0x2b0>)
 800261a:	2201      	movs	r2, #1
 800261c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261e:	f7ff f865 	bl	80016ec <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002626:	f7ff f861 	bl	80016ec <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e19c      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002638:	4b46      	ldr	r3, [pc, #280]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002644:	4b43      	ldr	r3, [pc, #268]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	4940      	ldr	r1, [pc, #256]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002654:	4313      	orrs	r3, r2
 8002656:	600b      	str	r3, [r1, #0]
 8002658:	e015      	b.n	8002686 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800265a:	4b3f      	ldr	r3, [pc, #252]	; (8002758 <HAL_RCC_OscConfig+0x2b0>)
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002660:	f7ff f844 	bl	80016ec <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002668:	f7ff f840 	bl	80016ec <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e17b      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267a:	4b36      	ldr	r3, [pc, #216]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b00      	cmp	r3, #0
 8002690:	d030      	beq.n	80026f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d016      	beq.n	80026c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800269a:	4b30      	ldr	r3, [pc, #192]	; (800275c <HAL_RCC_OscConfig+0x2b4>)
 800269c:	2201      	movs	r2, #1
 800269e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a0:	f7ff f824 	bl	80016ec <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a8:	f7ff f820 	bl	80016ec <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e15b      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ba:	4b26      	ldr	r3, [pc, #152]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80026bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0x200>
 80026c6:	e015      	b.n	80026f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c8:	4b24      	ldr	r3, [pc, #144]	; (800275c <HAL_RCC_OscConfig+0x2b4>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ce:	f7ff f80d 	bl	80016ec <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026d6:	f7ff f809 	bl	80016ec <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e144      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e8:	4b1a      	ldr	r3, [pc, #104]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 80026ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1f0      	bne.n	80026d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 80a0 	beq.w	8002842 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002702:	2300      	movs	r3, #0
 8002704:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002706:	4b13      	ldr	r3, [pc, #76]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d10f      	bne.n	8002732 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	60bb      	str	r3, [r7, #8]
 8002716:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	4a0e      	ldr	r2, [pc, #56]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 800271c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002720:	6413      	str	r3, [r2, #64]	; 0x40
 8002722:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <HAL_RCC_OscConfig+0x2ac>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272a:	60bb      	str	r3, [r7, #8]
 800272c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800272e:	2301      	movs	r3, #1
 8002730:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002732:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <HAL_RCC_OscConfig+0x2b8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273a:	2b00      	cmp	r3, #0
 800273c:	d121      	bne.n	8002782 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <HAL_RCC_OscConfig+0x2b8>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a07      	ldr	r2, [pc, #28]	; (8002760 <HAL_RCC_OscConfig+0x2b8>)
 8002744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800274a:	f7fe ffcf 	bl	80016ec <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002750:	e011      	b.n	8002776 <HAL_RCC_OscConfig+0x2ce>
 8002752:	bf00      	nop
 8002754:	40023800 	.word	0x40023800
 8002758:	42470000 	.word	0x42470000
 800275c:	42470e80 	.word	0x42470e80
 8002760:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002764:	f7fe ffc2 	bl	80016ec <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e0fd      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002776:	4b81      	ldr	r3, [pc, #516]	; (800297c <HAL_RCC_OscConfig+0x4d4>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d106      	bne.n	8002798 <HAL_RCC_OscConfig+0x2f0>
 800278a:	4b7d      	ldr	r3, [pc, #500]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 800278c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278e:	4a7c      	ldr	r2, [pc, #496]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	6713      	str	r3, [r2, #112]	; 0x70
 8002796:	e01c      	b.n	80027d2 <HAL_RCC_OscConfig+0x32a>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b05      	cmp	r3, #5
 800279e:	d10c      	bne.n	80027ba <HAL_RCC_OscConfig+0x312>
 80027a0:	4b77      	ldr	r3, [pc, #476]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 80027a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a4:	4a76      	ldr	r2, [pc, #472]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 80027a6:	f043 0304 	orr.w	r3, r3, #4
 80027aa:	6713      	str	r3, [r2, #112]	; 0x70
 80027ac:	4b74      	ldr	r3, [pc, #464]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 80027ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b0:	4a73      	ldr	r2, [pc, #460]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	6713      	str	r3, [r2, #112]	; 0x70
 80027b8:	e00b      	b.n	80027d2 <HAL_RCC_OscConfig+0x32a>
 80027ba:	4b71      	ldr	r3, [pc, #452]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 80027bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027be:	4a70      	ldr	r2, [pc, #448]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 80027c0:	f023 0301 	bic.w	r3, r3, #1
 80027c4:	6713      	str	r3, [r2, #112]	; 0x70
 80027c6:	4b6e      	ldr	r3, [pc, #440]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ca:	4a6d      	ldr	r2, [pc, #436]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 80027cc:	f023 0304 	bic.w	r3, r3, #4
 80027d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d015      	beq.n	8002806 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027da:	f7fe ff87 	bl	80016ec <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e0:	e00a      	b.n	80027f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e2:	f7fe ff83 	bl	80016ec <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e0bc      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f8:	4b61      	ldr	r3, [pc, #388]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0ee      	beq.n	80027e2 <HAL_RCC_OscConfig+0x33a>
 8002804:	e014      	b.n	8002830 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002806:	f7fe ff71 	bl	80016ec <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800280c:	e00a      	b.n	8002824 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800280e:	f7fe ff6d 	bl	80016ec <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	f241 3288 	movw	r2, #5000	; 0x1388
 800281c:	4293      	cmp	r3, r2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e0a6      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002824:	4b56      	ldr	r3, [pc, #344]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 8002826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1ee      	bne.n	800280e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002830:	7dfb      	ldrb	r3, [r7, #23]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d105      	bne.n	8002842 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002836:	4b52      	ldr	r3, [pc, #328]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	4a51      	ldr	r2, [pc, #324]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 800283c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002840:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 8092 	beq.w	8002970 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800284c:	4b4c      	ldr	r3, [pc, #304]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 030c 	and.w	r3, r3, #12
 8002854:	2b08      	cmp	r3, #8
 8002856:	d05c      	beq.n	8002912 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	2b02      	cmp	r3, #2
 800285e:	d141      	bne.n	80028e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002860:	4b48      	ldr	r3, [pc, #288]	; (8002984 <HAL_RCC_OscConfig+0x4dc>)
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002866:	f7fe ff41 	bl	80016ec <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286e:	f7fe ff3d 	bl	80016ec <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e078      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002880:	4b3f      	ldr	r3, [pc, #252]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f0      	bne.n	800286e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69da      	ldr	r2, [r3, #28]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	019b      	lsls	r3, r3, #6
 800289c:	431a      	orrs	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	085b      	lsrs	r3, r3, #1
 80028a4:	3b01      	subs	r3, #1
 80028a6:	041b      	lsls	r3, r3, #16
 80028a8:	431a      	orrs	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ae:	061b      	lsls	r3, r3, #24
 80028b0:	4933      	ldr	r1, [pc, #204]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028b6:	4b33      	ldr	r3, [pc, #204]	; (8002984 <HAL_RCC_OscConfig+0x4dc>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7fe ff16 	bl	80016ec <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c4:	f7fe ff12 	bl	80016ec <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e04d      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d6:	4b2a      	ldr	r3, [pc, #168]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCC_OscConfig+0x41c>
 80028e2:	e045      	b.n	8002970 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e4:	4b27      	ldr	r3, [pc, #156]	; (8002984 <HAL_RCC_OscConfig+0x4dc>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ea:	f7fe feff 	bl	80016ec <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f2:	f7fe fefb 	bl	80016ec <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e036      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002904:	4b1e      	ldr	r3, [pc, #120]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1f0      	bne.n	80028f2 <HAL_RCC_OscConfig+0x44a>
 8002910:	e02e      	b.n	8002970 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e029      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800291e:	4b18      	ldr	r3, [pc, #96]	; (8002980 <HAL_RCC_OscConfig+0x4d8>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	429a      	cmp	r2, r3
 8002930:	d11c      	bne.n	800296c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293c:	429a      	cmp	r2, r3
 800293e:	d115      	bne.n	800296c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002946:	4013      	ands	r3, r2
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800294c:	4293      	cmp	r3, r2
 800294e:	d10d      	bne.n	800296c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800295a:	429a      	cmp	r2, r3
 800295c:	d106      	bne.n	800296c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40007000 	.word	0x40007000
 8002980:	40023800 	.word	0x40023800
 8002984:	42470060 	.word	0x42470060

08002988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e0cc      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800299c:	4b68      	ldr	r3, [pc, #416]	; (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 030f 	and.w	r3, r3, #15
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d90c      	bls.n	80029c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029aa:	4b65      	ldr	r3, [pc, #404]	; (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b2:	4b63      	ldr	r3, [pc, #396]	; (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d001      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0b8      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d020      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029dc:	4b59      	ldr	r3, [pc, #356]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	4a58      	ldr	r2, [pc, #352]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f4:	4b53      	ldr	r3, [pc, #332]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	4a52      	ldr	r2, [pc, #328]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a00:	4b50      	ldr	r3, [pc, #320]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	494d      	ldr	r1, [pc, #308]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d044      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d107      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a26:	4b47      	ldr	r3, [pc, #284]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d119      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e07f      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d003      	beq.n	8002a46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	d107      	bne.n	8002a56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a46:	4b3f      	ldr	r3, [pc, #252]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d109      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e06f      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a56:	4b3b      	ldr	r3, [pc, #236]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d101      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e067      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a66:	4b37      	ldr	r3, [pc, #220]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f023 0203 	bic.w	r2, r3, #3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	4934      	ldr	r1, [pc, #208]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a78:	f7fe fe38 	bl	80016ec <HAL_GetTick>
 8002a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7e:	e00a      	b.n	8002a96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a80:	f7fe fe34 	bl	80016ec <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e04f      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a96:	4b2b      	ldr	r3, [pc, #172]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 020c 	and.w	r2, r3, #12
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d1eb      	bne.n	8002a80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa8:	4b25      	ldr	r3, [pc, #148]	; (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 030f 	and.w	r3, r3, #15
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d20c      	bcs.n	8002ad0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab6:	4b22      	ldr	r3, [pc, #136]	; (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002abe:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e032      	b.n	8002b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002adc:	4b19      	ldr	r3, [pc, #100]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	4916      	ldr	r1, [pc, #88]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d009      	beq.n	8002b0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002afa:	4b12      	ldr	r3, [pc, #72]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	00db      	lsls	r3, r3, #3
 8002b08:	490e      	ldr	r1, [pc, #56]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b0e:	f000 f821 	bl	8002b54 <HAL_RCC_GetSysClockFreq>
 8002b12:	4601      	mov	r1, r0
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	091b      	lsrs	r3, r3, #4
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	4a0a      	ldr	r2, [pc, #40]	; (8002b48 <HAL_RCC_ClockConfig+0x1c0>)
 8002b20:	5cd3      	ldrb	r3, [r2, r3]
 8002b22:	fa21 f303 	lsr.w	r3, r1, r3
 8002b26:	4a09      	ldr	r2, [pc, #36]	; (8002b4c <HAL_RCC_ClockConfig+0x1c4>)
 8002b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b2a:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <HAL_RCC_ClockConfig+0x1c8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe fd98 	bl	8001664 <HAL_InitTick>

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40023c00 	.word	0x40023c00
 8002b44:	40023800 	.word	0x40023800
 8002b48:	080040ac 	.word	0x080040ac
 8002b4c:	20000000 	.word	0x20000000
 8002b50:	20000004 	.word	0x20000004

08002b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	607b      	str	r3, [r7, #4]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	2300      	movs	r3, #0
 8002b64:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b6a:	4b63      	ldr	r3, [pc, #396]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
 8002b72:	2b04      	cmp	r3, #4
 8002b74:	d007      	beq.n	8002b86 <HAL_RCC_GetSysClockFreq+0x32>
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d008      	beq.n	8002b8c <HAL_RCC_GetSysClockFreq+0x38>
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f040 80b4 	bne.w	8002ce8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b80:	4b5e      	ldr	r3, [pc, #376]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b82:	60bb      	str	r3, [r7, #8]
       break;
 8002b84:	e0b3      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b86:	4b5e      	ldr	r3, [pc, #376]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002b88:	60bb      	str	r3, [r7, #8]
      break;
 8002b8a:	e0b0      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b8c:	4b5a      	ldr	r3, [pc, #360]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b94:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b96:	4b58      	ldr	r3, [pc, #352]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d04a      	beq.n	8002c38 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ba2:	4b55      	ldr	r3, [pc, #340]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	099b      	lsrs	r3, r3, #6
 8002ba8:	f04f 0400 	mov.w	r4, #0
 8002bac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	ea03 0501 	and.w	r5, r3, r1
 8002bb8:	ea04 0602 	and.w	r6, r4, r2
 8002bbc:	4629      	mov	r1, r5
 8002bbe:	4632      	mov	r2, r6
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	f04f 0400 	mov.w	r4, #0
 8002bc8:	0154      	lsls	r4, r2, #5
 8002bca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bce:	014b      	lsls	r3, r1, #5
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4622      	mov	r2, r4
 8002bd4:	1b49      	subs	r1, r1, r5
 8002bd6:	eb62 0206 	sbc.w	r2, r2, r6
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	f04f 0400 	mov.w	r4, #0
 8002be2:	0194      	lsls	r4, r2, #6
 8002be4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002be8:	018b      	lsls	r3, r1, #6
 8002bea:	1a5b      	subs	r3, r3, r1
 8002bec:	eb64 0402 	sbc.w	r4, r4, r2
 8002bf0:	f04f 0100 	mov.w	r1, #0
 8002bf4:	f04f 0200 	mov.w	r2, #0
 8002bf8:	00e2      	lsls	r2, r4, #3
 8002bfa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002bfe:	00d9      	lsls	r1, r3, #3
 8002c00:	460b      	mov	r3, r1
 8002c02:	4614      	mov	r4, r2
 8002c04:	195b      	adds	r3, r3, r5
 8002c06:	eb44 0406 	adc.w	r4, r4, r6
 8002c0a:	f04f 0100 	mov.w	r1, #0
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	0262      	lsls	r2, r4, #9
 8002c14:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002c18:	0259      	lsls	r1, r3, #9
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4614      	mov	r4, r2
 8002c1e:	4618      	mov	r0, r3
 8002c20:	4621      	mov	r1, r4
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f04f 0400 	mov.w	r4, #0
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4623      	mov	r3, r4
 8002c2c:	f7fd ff0e 	bl	8000a4c <__aeabi_uldivmod>
 8002c30:	4603      	mov	r3, r0
 8002c32:	460c      	mov	r4, r1
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	e049      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c38:	4b2f      	ldr	r3, [pc, #188]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	099b      	lsrs	r3, r3, #6
 8002c3e:	f04f 0400 	mov.w	r4, #0
 8002c42:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c46:	f04f 0200 	mov.w	r2, #0
 8002c4a:	ea03 0501 	and.w	r5, r3, r1
 8002c4e:	ea04 0602 	and.w	r6, r4, r2
 8002c52:	4629      	mov	r1, r5
 8002c54:	4632      	mov	r2, r6
 8002c56:	f04f 0300 	mov.w	r3, #0
 8002c5a:	f04f 0400 	mov.w	r4, #0
 8002c5e:	0154      	lsls	r4, r2, #5
 8002c60:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c64:	014b      	lsls	r3, r1, #5
 8002c66:	4619      	mov	r1, r3
 8002c68:	4622      	mov	r2, r4
 8002c6a:	1b49      	subs	r1, r1, r5
 8002c6c:	eb62 0206 	sbc.w	r2, r2, r6
 8002c70:	f04f 0300 	mov.w	r3, #0
 8002c74:	f04f 0400 	mov.w	r4, #0
 8002c78:	0194      	lsls	r4, r2, #6
 8002c7a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c7e:	018b      	lsls	r3, r1, #6
 8002c80:	1a5b      	subs	r3, r3, r1
 8002c82:	eb64 0402 	sbc.w	r4, r4, r2
 8002c86:	f04f 0100 	mov.w	r1, #0
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	00e2      	lsls	r2, r4, #3
 8002c90:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c94:	00d9      	lsls	r1, r3, #3
 8002c96:	460b      	mov	r3, r1
 8002c98:	4614      	mov	r4, r2
 8002c9a:	195b      	adds	r3, r3, r5
 8002c9c:	eb44 0406 	adc.w	r4, r4, r6
 8002ca0:	f04f 0100 	mov.w	r1, #0
 8002ca4:	f04f 0200 	mov.w	r2, #0
 8002ca8:	02a2      	lsls	r2, r4, #10
 8002caa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002cae:	0299      	lsls	r1, r3, #10
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4614      	mov	r4, r2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	4621      	mov	r1, r4
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f04f 0400 	mov.w	r4, #0
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	4623      	mov	r3, r4
 8002cc2:	f7fd fec3 	bl	8000a4c <__aeabi_uldivmod>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	460c      	mov	r4, r1
 8002cca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ccc:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	0c1b      	lsrs	r3, r3, #16
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce4:	60bb      	str	r3, [r7, #8]
      break;
 8002ce6:	e002      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ce8:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002cea:	60bb      	str	r3, [r7, #8]
      break;
 8002cec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cee:	68bb      	ldr	r3, [r7, #8]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	00f42400 	.word	0x00f42400
 8002d00:	007a1200 	.word	0x007a1200

08002d04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e056      	b.n	8002dc4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d106      	bne.n	8002d36 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7fe fb0d 	bl	8001350 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d4c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	ea42 0103 	orr.w	r1, r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	0c1b      	lsrs	r3, r3, #16
 8002d94:	f003 0104 	and.w	r1, r3, #4
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	69da      	ldr	r2, [r3, #28]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002db2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	603b      	str	r3, [r7, #0]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d101      	bne.n	8002dee <HAL_SPI_Transmit+0x22>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e11e      	b.n	800302c <HAL_SPI_Transmit+0x260>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002df6:	f7fe fc79 	bl	80016ec <HAL_GetTick>
 8002dfa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002dfc:	88fb      	ldrh	r3, [r7, #6]
 8002dfe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d002      	beq.n	8002e12 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e10:	e103      	b.n	800301a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <HAL_SPI_Transmit+0x52>
 8002e18:	88fb      	ldrh	r3, [r7, #6]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d102      	bne.n	8002e24 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e22:	e0fa      	b.n	800301a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2203      	movs	r2, #3
 8002e28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	88fa      	ldrh	r2, [r7, #6]
 8002e3c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	88fa      	ldrh	r2, [r7, #6]
 8002e42:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2200      	movs	r2, #0
 8002e48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e6a:	d107      	bne.n	8002e7c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e7a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e86:	2b40      	cmp	r3, #64	; 0x40
 8002e88:	d007      	beq.n	8002e9a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ea2:	d14b      	bne.n	8002f3c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d002      	beq.n	8002eb2 <HAL_SPI_Transmit+0xe6>
 8002eac:	8afb      	ldrh	r3, [r7, #22]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d13e      	bne.n	8002f30 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	881a      	ldrh	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	1c9a      	adds	r2, r3, #2
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ed6:	e02b      	b.n	8002f30 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d112      	bne.n	8002f0c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	881a      	ldrh	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	1c9a      	adds	r2, r3, #2
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f0a:	e011      	b.n	8002f30 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f0c:	f7fe fbee 	bl	80016ec <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d803      	bhi.n	8002f24 <HAL_SPI_Transmit+0x158>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f22:	d102      	bne.n	8002f2a <HAL_SPI_Transmit+0x15e>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d102      	bne.n	8002f30 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f2e:	e074      	b.n	800301a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1ce      	bne.n	8002ed8 <HAL_SPI_Transmit+0x10c>
 8002f3a:	e04c      	b.n	8002fd6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <HAL_SPI_Transmit+0x17e>
 8002f44:	8afb      	ldrh	r3, [r7, #22]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d140      	bne.n	8002fcc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	330c      	adds	r3, #12
 8002f54:	7812      	ldrb	r2, [r2, #0]
 8002f56:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002f70:	e02c      	b.n	8002fcc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d113      	bne.n	8002fa8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	330c      	adds	r3, #12
 8002f8a:	7812      	ldrb	r2, [r2, #0]
 8002f8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	86da      	strh	r2, [r3, #54]	; 0x36
 8002fa6:	e011      	b.n	8002fcc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fa8:	f7fe fba0 	bl	80016ec <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d803      	bhi.n	8002fc0 <HAL_SPI_Transmit+0x1f4>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fbe:	d102      	bne.n	8002fc6 <HAL_SPI_Transmit+0x1fa>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d102      	bne.n	8002fcc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002fca:	e026      	b.n	800301a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1cd      	bne.n	8002f72 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	6839      	ldr	r1, [r7, #0]
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f894 	bl	8003108 <SPI_EndRxTxTransaction>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d002      	beq.n	8002fec <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10a      	bne.n	800300a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	613b      	str	r3, [r7, #16]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	613b      	str	r3, [r7, #16]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	613b      	str	r3, [r7, #16]
 8003008:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300e:	2b00      	cmp	r3, #0
 8003010:	d002      	beq.n	8003018 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	77fb      	strb	r3, [r7, #31]
 8003016:	e000      	b.n	800301a <HAL_SPI_Transmit+0x24e>
  }

error:
 8003018:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800302a:	7ffb      	ldrb	r3, [r7, #31]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3720      	adds	r7, #32
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	4613      	mov	r3, r2
 8003042:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003044:	e04c      	b.n	80030e0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304c:	d048      	beq.n	80030e0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800304e:	f7fe fb4d 	bl	80016ec <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d902      	bls.n	8003064 <SPI_WaitFlagStateUntilTimeout+0x30>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d13d      	bne.n	80030e0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003072:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800307c:	d111      	bne.n	80030a2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003086:	d004      	beq.n	8003092 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003090:	d107      	bne.n	80030a2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030aa:	d10f      	bne.n	80030cc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e00f      	b.n	8003100 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689a      	ldr	r2, [r3, #8]
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	4013      	ands	r3, r2
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	bf0c      	ite	eq
 80030f0:	2301      	moveq	r3, #1
 80030f2:	2300      	movne	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	461a      	mov	r2, r3
 80030f8:	79fb      	ldrb	r3, [r7, #7]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d1a3      	bne.n	8003046 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b088      	sub	sp, #32
 800310c:	af02      	add	r7, sp, #8
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003114:	4b1b      	ldr	r3, [pc, #108]	; (8003184 <SPI_EndRxTxTransaction+0x7c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a1b      	ldr	r2, [pc, #108]	; (8003188 <SPI_EndRxTxTransaction+0x80>)
 800311a:	fba2 2303 	umull	r2, r3, r2, r3
 800311e:	0d5b      	lsrs	r3, r3, #21
 8003120:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003124:	fb02 f303 	mul.w	r3, r2, r3
 8003128:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003132:	d112      	bne.n	800315a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2200      	movs	r2, #0
 800313c:	2180      	movs	r1, #128	; 0x80
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f7ff ff78 	bl	8003034 <SPI_WaitFlagStateUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d016      	beq.n	8003178 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314e:	f043 0220 	orr.w	r2, r3, #32
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e00f      	b.n	800317a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00a      	beq.n	8003176 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	3b01      	subs	r3, #1
 8003164:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003170:	2b80      	cmp	r3, #128	; 0x80
 8003172:	d0f2      	beq.n	800315a <SPI_EndRxTxTransaction+0x52>
 8003174:	e000      	b.n	8003178 <SPI_EndRxTxTransaction+0x70>
        break;
 8003176:	bf00      	nop
  }

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	20000000 	.word	0x20000000
 8003188:	165e9f81 	.word	0x165e9f81

0800318c <__errno>:
 800318c:	4b01      	ldr	r3, [pc, #4]	; (8003194 <__errno+0x8>)
 800318e:	6818      	ldr	r0, [r3, #0]
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	2000000c 	.word	0x2000000c

08003198 <__libc_init_array>:
 8003198:	b570      	push	{r4, r5, r6, lr}
 800319a:	4e0d      	ldr	r6, [pc, #52]	; (80031d0 <__libc_init_array+0x38>)
 800319c:	4c0d      	ldr	r4, [pc, #52]	; (80031d4 <__libc_init_array+0x3c>)
 800319e:	1ba4      	subs	r4, r4, r6
 80031a0:	10a4      	asrs	r4, r4, #2
 80031a2:	2500      	movs	r5, #0
 80031a4:	42a5      	cmp	r5, r4
 80031a6:	d109      	bne.n	80031bc <__libc_init_array+0x24>
 80031a8:	4e0b      	ldr	r6, [pc, #44]	; (80031d8 <__libc_init_array+0x40>)
 80031aa:	4c0c      	ldr	r4, [pc, #48]	; (80031dc <__libc_init_array+0x44>)
 80031ac:	f000 ff68 	bl	8004080 <_init>
 80031b0:	1ba4      	subs	r4, r4, r6
 80031b2:	10a4      	asrs	r4, r4, #2
 80031b4:	2500      	movs	r5, #0
 80031b6:	42a5      	cmp	r5, r4
 80031b8:	d105      	bne.n	80031c6 <__libc_init_array+0x2e>
 80031ba:	bd70      	pop	{r4, r5, r6, pc}
 80031bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031c0:	4798      	blx	r3
 80031c2:	3501      	adds	r5, #1
 80031c4:	e7ee      	b.n	80031a4 <__libc_init_array+0xc>
 80031c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031ca:	4798      	blx	r3
 80031cc:	3501      	adds	r5, #1
 80031ce:	e7f2      	b.n	80031b6 <__libc_init_array+0x1e>
 80031d0:	0800415c 	.word	0x0800415c
 80031d4:	0800415c 	.word	0x0800415c
 80031d8:	0800415c 	.word	0x0800415c
 80031dc:	08004160 	.word	0x08004160

080031e0 <memset>:
 80031e0:	4402      	add	r2, r0
 80031e2:	4603      	mov	r3, r0
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d100      	bne.n	80031ea <memset+0xa>
 80031e8:	4770      	bx	lr
 80031ea:	f803 1b01 	strb.w	r1, [r3], #1
 80031ee:	e7f9      	b.n	80031e4 <memset+0x4>

080031f0 <iprintf>:
 80031f0:	b40f      	push	{r0, r1, r2, r3}
 80031f2:	4b0a      	ldr	r3, [pc, #40]	; (800321c <iprintf+0x2c>)
 80031f4:	b513      	push	{r0, r1, r4, lr}
 80031f6:	681c      	ldr	r4, [r3, #0]
 80031f8:	b124      	cbz	r4, 8003204 <iprintf+0x14>
 80031fa:	69a3      	ldr	r3, [r4, #24]
 80031fc:	b913      	cbnz	r3, 8003204 <iprintf+0x14>
 80031fe:	4620      	mov	r0, r4
 8003200:	f000 fa22 	bl	8003648 <__sinit>
 8003204:	ab05      	add	r3, sp, #20
 8003206:	9a04      	ldr	r2, [sp, #16]
 8003208:	68a1      	ldr	r1, [r4, #8]
 800320a:	9301      	str	r3, [sp, #4]
 800320c:	4620      	mov	r0, r4
 800320e:	f000 fbdb 	bl	80039c8 <_vfiprintf_r>
 8003212:	b002      	add	sp, #8
 8003214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003218:	b004      	add	sp, #16
 800321a:	4770      	bx	lr
 800321c:	2000000c 	.word	0x2000000c

08003220 <_puts_r>:
 8003220:	b570      	push	{r4, r5, r6, lr}
 8003222:	460e      	mov	r6, r1
 8003224:	4605      	mov	r5, r0
 8003226:	b118      	cbz	r0, 8003230 <_puts_r+0x10>
 8003228:	6983      	ldr	r3, [r0, #24]
 800322a:	b90b      	cbnz	r3, 8003230 <_puts_r+0x10>
 800322c:	f000 fa0c 	bl	8003648 <__sinit>
 8003230:	69ab      	ldr	r3, [r5, #24]
 8003232:	68ac      	ldr	r4, [r5, #8]
 8003234:	b913      	cbnz	r3, 800323c <_puts_r+0x1c>
 8003236:	4628      	mov	r0, r5
 8003238:	f000 fa06 	bl	8003648 <__sinit>
 800323c:	4b23      	ldr	r3, [pc, #140]	; (80032cc <_puts_r+0xac>)
 800323e:	429c      	cmp	r4, r3
 8003240:	d117      	bne.n	8003272 <_puts_r+0x52>
 8003242:	686c      	ldr	r4, [r5, #4]
 8003244:	89a3      	ldrh	r3, [r4, #12]
 8003246:	071b      	lsls	r3, r3, #28
 8003248:	d51d      	bpl.n	8003286 <_puts_r+0x66>
 800324a:	6923      	ldr	r3, [r4, #16]
 800324c:	b1db      	cbz	r3, 8003286 <_puts_r+0x66>
 800324e:	3e01      	subs	r6, #1
 8003250:	68a3      	ldr	r3, [r4, #8]
 8003252:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003256:	3b01      	subs	r3, #1
 8003258:	60a3      	str	r3, [r4, #8]
 800325a:	b9e9      	cbnz	r1, 8003298 <_puts_r+0x78>
 800325c:	2b00      	cmp	r3, #0
 800325e:	da2e      	bge.n	80032be <_puts_r+0x9e>
 8003260:	4622      	mov	r2, r4
 8003262:	210a      	movs	r1, #10
 8003264:	4628      	mov	r0, r5
 8003266:	f000 f83f 	bl	80032e8 <__swbuf_r>
 800326a:	3001      	adds	r0, #1
 800326c:	d011      	beq.n	8003292 <_puts_r+0x72>
 800326e:	200a      	movs	r0, #10
 8003270:	e011      	b.n	8003296 <_puts_r+0x76>
 8003272:	4b17      	ldr	r3, [pc, #92]	; (80032d0 <_puts_r+0xb0>)
 8003274:	429c      	cmp	r4, r3
 8003276:	d101      	bne.n	800327c <_puts_r+0x5c>
 8003278:	68ac      	ldr	r4, [r5, #8]
 800327a:	e7e3      	b.n	8003244 <_puts_r+0x24>
 800327c:	4b15      	ldr	r3, [pc, #84]	; (80032d4 <_puts_r+0xb4>)
 800327e:	429c      	cmp	r4, r3
 8003280:	bf08      	it	eq
 8003282:	68ec      	ldreq	r4, [r5, #12]
 8003284:	e7de      	b.n	8003244 <_puts_r+0x24>
 8003286:	4621      	mov	r1, r4
 8003288:	4628      	mov	r0, r5
 800328a:	f000 f87f 	bl	800338c <__swsetup_r>
 800328e:	2800      	cmp	r0, #0
 8003290:	d0dd      	beq.n	800324e <_puts_r+0x2e>
 8003292:	f04f 30ff 	mov.w	r0, #4294967295
 8003296:	bd70      	pop	{r4, r5, r6, pc}
 8003298:	2b00      	cmp	r3, #0
 800329a:	da04      	bge.n	80032a6 <_puts_r+0x86>
 800329c:	69a2      	ldr	r2, [r4, #24]
 800329e:	429a      	cmp	r2, r3
 80032a0:	dc06      	bgt.n	80032b0 <_puts_r+0x90>
 80032a2:	290a      	cmp	r1, #10
 80032a4:	d004      	beq.n	80032b0 <_puts_r+0x90>
 80032a6:	6823      	ldr	r3, [r4, #0]
 80032a8:	1c5a      	adds	r2, r3, #1
 80032aa:	6022      	str	r2, [r4, #0]
 80032ac:	7019      	strb	r1, [r3, #0]
 80032ae:	e7cf      	b.n	8003250 <_puts_r+0x30>
 80032b0:	4622      	mov	r2, r4
 80032b2:	4628      	mov	r0, r5
 80032b4:	f000 f818 	bl	80032e8 <__swbuf_r>
 80032b8:	3001      	adds	r0, #1
 80032ba:	d1c9      	bne.n	8003250 <_puts_r+0x30>
 80032bc:	e7e9      	b.n	8003292 <_puts_r+0x72>
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	200a      	movs	r0, #10
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	6022      	str	r2, [r4, #0]
 80032c6:	7018      	strb	r0, [r3, #0]
 80032c8:	e7e5      	b.n	8003296 <_puts_r+0x76>
 80032ca:	bf00      	nop
 80032cc:	080040e0 	.word	0x080040e0
 80032d0:	08004100 	.word	0x08004100
 80032d4:	080040c0 	.word	0x080040c0

080032d8 <puts>:
 80032d8:	4b02      	ldr	r3, [pc, #8]	; (80032e4 <puts+0xc>)
 80032da:	4601      	mov	r1, r0
 80032dc:	6818      	ldr	r0, [r3, #0]
 80032de:	f7ff bf9f 	b.w	8003220 <_puts_r>
 80032e2:	bf00      	nop
 80032e4:	2000000c 	.word	0x2000000c

080032e8 <__swbuf_r>:
 80032e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ea:	460e      	mov	r6, r1
 80032ec:	4614      	mov	r4, r2
 80032ee:	4605      	mov	r5, r0
 80032f0:	b118      	cbz	r0, 80032fa <__swbuf_r+0x12>
 80032f2:	6983      	ldr	r3, [r0, #24]
 80032f4:	b90b      	cbnz	r3, 80032fa <__swbuf_r+0x12>
 80032f6:	f000 f9a7 	bl	8003648 <__sinit>
 80032fa:	4b21      	ldr	r3, [pc, #132]	; (8003380 <__swbuf_r+0x98>)
 80032fc:	429c      	cmp	r4, r3
 80032fe:	d12a      	bne.n	8003356 <__swbuf_r+0x6e>
 8003300:	686c      	ldr	r4, [r5, #4]
 8003302:	69a3      	ldr	r3, [r4, #24]
 8003304:	60a3      	str	r3, [r4, #8]
 8003306:	89a3      	ldrh	r3, [r4, #12]
 8003308:	071a      	lsls	r2, r3, #28
 800330a:	d52e      	bpl.n	800336a <__swbuf_r+0x82>
 800330c:	6923      	ldr	r3, [r4, #16]
 800330e:	b363      	cbz	r3, 800336a <__swbuf_r+0x82>
 8003310:	6923      	ldr	r3, [r4, #16]
 8003312:	6820      	ldr	r0, [r4, #0]
 8003314:	1ac0      	subs	r0, r0, r3
 8003316:	6963      	ldr	r3, [r4, #20]
 8003318:	b2f6      	uxtb	r6, r6
 800331a:	4283      	cmp	r3, r0
 800331c:	4637      	mov	r7, r6
 800331e:	dc04      	bgt.n	800332a <__swbuf_r+0x42>
 8003320:	4621      	mov	r1, r4
 8003322:	4628      	mov	r0, r5
 8003324:	f000 f926 	bl	8003574 <_fflush_r>
 8003328:	bb28      	cbnz	r0, 8003376 <__swbuf_r+0x8e>
 800332a:	68a3      	ldr	r3, [r4, #8]
 800332c:	3b01      	subs	r3, #1
 800332e:	60a3      	str	r3, [r4, #8]
 8003330:	6823      	ldr	r3, [r4, #0]
 8003332:	1c5a      	adds	r2, r3, #1
 8003334:	6022      	str	r2, [r4, #0]
 8003336:	701e      	strb	r6, [r3, #0]
 8003338:	6963      	ldr	r3, [r4, #20]
 800333a:	3001      	adds	r0, #1
 800333c:	4283      	cmp	r3, r0
 800333e:	d004      	beq.n	800334a <__swbuf_r+0x62>
 8003340:	89a3      	ldrh	r3, [r4, #12]
 8003342:	07db      	lsls	r3, r3, #31
 8003344:	d519      	bpl.n	800337a <__swbuf_r+0x92>
 8003346:	2e0a      	cmp	r6, #10
 8003348:	d117      	bne.n	800337a <__swbuf_r+0x92>
 800334a:	4621      	mov	r1, r4
 800334c:	4628      	mov	r0, r5
 800334e:	f000 f911 	bl	8003574 <_fflush_r>
 8003352:	b190      	cbz	r0, 800337a <__swbuf_r+0x92>
 8003354:	e00f      	b.n	8003376 <__swbuf_r+0x8e>
 8003356:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <__swbuf_r+0x9c>)
 8003358:	429c      	cmp	r4, r3
 800335a:	d101      	bne.n	8003360 <__swbuf_r+0x78>
 800335c:	68ac      	ldr	r4, [r5, #8]
 800335e:	e7d0      	b.n	8003302 <__swbuf_r+0x1a>
 8003360:	4b09      	ldr	r3, [pc, #36]	; (8003388 <__swbuf_r+0xa0>)
 8003362:	429c      	cmp	r4, r3
 8003364:	bf08      	it	eq
 8003366:	68ec      	ldreq	r4, [r5, #12]
 8003368:	e7cb      	b.n	8003302 <__swbuf_r+0x1a>
 800336a:	4621      	mov	r1, r4
 800336c:	4628      	mov	r0, r5
 800336e:	f000 f80d 	bl	800338c <__swsetup_r>
 8003372:	2800      	cmp	r0, #0
 8003374:	d0cc      	beq.n	8003310 <__swbuf_r+0x28>
 8003376:	f04f 37ff 	mov.w	r7, #4294967295
 800337a:	4638      	mov	r0, r7
 800337c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800337e:	bf00      	nop
 8003380:	080040e0 	.word	0x080040e0
 8003384:	08004100 	.word	0x08004100
 8003388:	080040c0 	.word	0x080040c0

0800338c <__swsetup_r>:
 800338c:	4b32      	ldr	r3, [pc, #200]	; (8003458 <__swsetup_r+0xcc>)
 800338e:	b570      	push	{r4, r5, r6, lr}
 8003390:	681d      	ldr	r5, [r3, #0]
 8003392:	4606      	mov	r6, r0
 8003394:	460c      	mov	r4, r1
 8003396:	b125      	cbz	r5, 80033a2 <__swsetup_r+0x16>
 8003398:	69ab      	ldr	r3, [r5, #24]
 800339a:	b913      	cbnz	r3, 80033a2 <__swsetup_r+0x16>
 800339c:	4628      	mov	r0, r5
 800339e:	f000 f953 	bl	8003648 <__sinit>
 80033a2:	4b2e      	ldr	r3, [pc, #184]	; (800345c <__swsetup_r+0xd0>)
 80033a4:	429c      	cmp	r4, r3
 80033a6:	d10f      	bne.n	80033c8 <__swsetup_r+0x3c>
 80033a8:	686c      	ldr	r4, [r5, #4]
 80033aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	0715      	lsls	r5, r2, #28
 80033b2:	d42c      	bmi.n	800340e <__swsetup_r+0x82>
 80033b4:	06d0      	lsls	r0, r2, #27
 80033b6:	d411      	bmi.n	80033dc <__swsetup_r+0x50>
 80033b8:	2209      	movs	r2, #9
 80033ba:	6032      	str	r2, [r6, #0]
 80033bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033c0:	81a3      	strh	r3, [r4, #12]
 80033c2:	f04f 30ff 	mov.w	r0, #4294967295
 80033c6:	e03e      	b.n	8003446 <__swsetup_r+0xba>
 80033c8:	4b25      	ldr	r3, [pc, #148]	; (8003460 <__swsetup_r+0xd4>)
 80033ca:	429c      	cmp	r4, r3
 80033cc:	d101      	bne.n	80033d2 <__swsetup_r+0x46>
 80033ce:	68ac      	ldr	r4, [r5, #8]
 80033d0:	e7eb      	b.n	80033aa <__swsetup_r+0x1e>
 80033d2:	4b24      	ldr	r3, [pc, #144]	; (8003464 <__swsetup_r+0xd8>)
 80033d4:	429c      	cmp	r4, r3
 80033d6:	bf08      	it	eq
 80033d8:	68ec      	ldreq	r4, [r5, #12]
 80033da:	e7e6      	b.n	80033aa <__swsetup_r+0x1e>
 80033dc:	0751      	lsls	r1, r2, #29
 80033de:	d512      	bpl.n	8003406 <__swsetup_r+0x7a>
 80033e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033e2:	b141      	cbz	r1, 80033f6 <__swsetup_r+0x6a>
 80033e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033e8:	4299      	cmp	r1, r3
 80033ea:	d002      	beq.n	80033f2 <__swsetup_r+0x66>
 80033ec:	4630      	mov	r0, r6
 80033ee:	f000 fa19 	bl	8003824 <_free_r>
 80033f2:	2300      	movs	r3, #0
 80033f4:	6363      	str	r3, [r4, #52]	; 0x34
 80033f6:	89a3      	ldrh	r3, [r4, #12]
 80033f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80033fc:	81a3      	strh	r3, [r4, #12]
 80033fe:	2300      	movs	r3, #0
 8003400:	6063      	str	r3, [r4, #4]
 8003402:	6923      	ldr	r3, [r4, #16]
 8003404:	6023      	str	r3, [r4, #0]
 8003406:	89a3      	ldrh	r3, [r4, #12]
 8003408:	f043 0308 	orr.w	r3, r3, #8
 800340c:	81a3      	strh	r3, [r4, #12]
 800340e:	6923      	ldr	r3, [r4, #16]
 8003410:	b94b      	cbnz	r3, 8003426 <__swsetup_r+0x9a>
 8003412:	89a3      	ldrh	r3, [r4, #12]
 8003414:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800341c:	d003      	beq.n	8003426 <__swsetup_r+0x9a>
 800341e:	4621      	mov	r1, r4
 8003420:	4630      	mov	r0, r6
 8003422:	f000 f9bf 	bl	80037a4 <__smakebuf_r>
 8003426:	89a2      	ldrh	r2, [r4, #12]
 8003428:	f012 0301 	ands.w	r3, r2, #1
 800342c:	d00c      	beq.n	8003448 <__swsetup_r+0xbc>
 800342e:	2300      	movs	r3, #0
 8003430:	60a3      	str	r3, [r4, #8]
 8003432:	6963      	ldr	r3, [r4, #20]
 8003434:	425b      	negs	r3, r3
 8003436:	61a3      	str	r3, [r4, #24]
 8003438:	6923      	ldr	r3, [r4, #16]
 800343a:	b953      	cbnz	r3, 8003452 <__swsetup_r+0xc6>
 800343c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003440:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003444:	d1ba      	bne.n	80033bc <__swsetup_r+0x30>
 8003446:	bd70      	pop	{r4, r5, r6, pc}
 8003448:	0792      	lsls	r2, r2, #30
 800344a:	bf58      	it	pl
 800344c:	6963      	ldrpl	r3, [r4, #20]
 800344e:	60a3      	str	r3, [r4, #8]
 8003450:	e7f2      	b.n	8003438 <__swsetup_r+0xac>
 8003452:	2000      	movs	r0, #0
 8003454:	e7f7      	b.n	8003446 <__swsetup_r+0xba>
 8003456:	bf00      	nop
 8003458:	2000000c 	.word	0x2000000c
 800345c:	080040e0 	.word	0x080040e0
 8003460:	08004100 	.word	0x08004100
 8003464:	080040c0 	.word	0x080040c0

08003468 <__sflush_r>:
 8003468:	898a      	ldrh	r2, [r1, #12]
 800346a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800346e:	4605      	mov	r5, r0
 8003470:	0710      	lsls	r0, r2, #28
 8003472:	460c      	mov	r4, r1
 8003474:	d458      	bmi.n	8003528 <__sflush_r+0xc0>
 8003476:	684b      	ldr	r3, [r1, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	dc05      	bgt.n	8003488 <__sflush_r+0x20>
 800347c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800347e:	2b00      	cmp	r3, #0
 8003480:	dc02      	bgt.n	8003488 <__sflush_r+0x20>
 8003482:	2000      	movs	r0, #0
 8003484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003488:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800348a:	2e00      	cmp	r6, #0
 800348c:	d0f9      	beq.n	8003482 <__sflush_r+0x1a>
 800348e:	2300      	movs	r3, #0
 8003490:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003494:	682f      	ldr	r7, [r5, #0]
 8003496:	6a21      	ldr	r1, [r4, #32]
 8003498:	602b      	str	r3, [r5, #0]
 800349a:	d032      	beq.n	8003502 <__sflush_r+0x9a>
 800349c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800349e:	89a3      	ldrh	r3, [r4, #12]
 80034a0:	075a      	lsls	r2, r3, #29
 80034a2:	d505      	bpl.n	80034b0 <__sflush_r+0x48>
 80034a4:	6863      	ldr	r3, [r4, #4]
 80034a6:	1ac0      	subs	r0, r0, r3
 80034a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80034aa:	b10b      	cbz	r3, 80034b0 <__sflush_r+0x48>
 80034ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80034ae:	1ac0      	subs	r0, r0, r3
 80034b0:	2300      	movs	r3, #0
 80034b2:	4602      	mov	r2, r0
 80034b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80034b6:	6a21      	ldr	r1, [r4, #32]
 80034b8:	4628      	mov	r0, r5
 80034ba:	47b0      	blx	r6
 80034bc:	1c43      	adds	r3, r0, #1
 80034be:	89a3      	ldrh	r3, [r4, #12]
 80034c0:	d106      	bne.n	80034d0 <__sflush_r+0x68>
 80034c2:	6829      	ldr	r1, [r5, #0]
 80034c4:	291d      	cmp	r1, #29
 80034c6:	d848      	bhi.n	800355a <__sflush_r+0xf2>
 80034c8:	4a29      	ldr	r2, [pc, #164]	; (8003570 <__sflush_r+0x108>)
 80034ca:	40ca      	lsrs	r2, r1
 80034cc:	07d6      	lsls	r6, r2, #31
 80034ce:	d544      	bpl.n	800355a <__sflush_r+0xf2>
 80034d0:	2200      	movs	r2, #0
 80034d2:	6062      	str	r2, [r4, #4]
 80034d4:	04d9      	lsls	r1, r3, #19
 80034d6:	6922      	ldr	r2, [r4, #16]
 80034d8:	6022      	str	r2, [r4, #0]
 80034da:	d504      	bpl.n	80034e6 <__sflush_r+0x7e>
 80034dc:	1c42      	adds	r2, r0, #1
 80034de:	d101      	bne.n	80034e4 <__sflush_r+0x7c>
 80034e0:	682b      	ldr	r3, [r5, #0]
 80034e2:	b903      	cbnz	r3, 80034e6 <__sflush_r+0x7e>
 80034e4:	6560      	str	r0, [r4, #84]	; 0x54
 80034e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034e8:	602f      	str	r7, [r5, #0]
 80034ea:	2900      	cmp	r1, #0
 80034ec:	d0c9      	beq.n	8003482 <__sflush_r+0x1a>
 80034ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80034f2:	4299      	cmp	r1, r3
 80034f4:	d002      	beq.n	80034fc <__sflush_r+0x94>
 80034f6:	4628      	mov	r0, r5
 80034f8:	f000 f994 	bl	8003824 <_free_r>
 80034fc:	2000      	movs	r0, #0
 80034fe:	6360      	str	r0, [r4, #52]	; 0x34
 8003500:	e7c0      	b.n	8003484 <__sflush_r+0x1c>
 8003502:	2301      	movs	r3, #1
 8003504:	4628      	mov	r0, r5
 8003506:	47b0      	blx	r6
 8003508:	1c41      	adds	r1, r0, #1
 800350a:	d1c8      	bne.n	800349e <__sflush_r+0x36>
 800350c:	682b      	ldr	r3, [r5, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0c5      	beq.n	800349e <__sflush_r+0x36>
 8003512:	2b1d      	cmp	r3, #29
 8003514:	d001      	beq.n	800351a <__sflush_r+0xb2>
 8003516:	2b16      	cmp	r3, #22
 8003518:	d101      	bne.n	800351e <__sflush_r+0xb6>
 800351a:	602f      	str	r7, [r5, #0]
 800351c:	e7b1      	b.n	8003482 <__sflush_r+0x1a>
 800351e:	89a3      	ldrh	r3, [r4, #12]
 8003520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003524:	81a3      	strh	r3, [r4, #12]
 8003526:	e7ad      	b.n	8003484 <__sflush_r+0x1c>
 8003528:	690f      	ldr	r7, [r1, #16]
 800352a:	2f00      	cmp	r7, #0
 800352c:	d0a9      	beq.n	8003482 <__sflush_r+0x1a>
 800352e:	0793      	lsls	r3, r2, #30
 8003530:	680e      	ldr	r6, [r1, #0]
 8003532:	bf08      	it	eq
 8003534:	694b      	ldreq	r3, [r1, #20]
 8003536:	600f      	str	r7, [r1, #0]
 8003538:	bf18      	it	ne
 800353a:	2300      	movne	r3, #0
 800353c:	eba6 0807 	sub.w	r8, r6, r7
 8003540:	608b      	str	r3, [r1, #8]
 8003542:	f1b8 0f00 	cmp.w	r8, #0
 8003546:	dd9c      	ble.n	8003482 <__sflush_r+0x1a>
 8003548:	4643      	mov	r3, r8
 800354a:	463a      	mov	r2, r7
 800354c:	6a21      	ldr	r1, [r4, #32]
 800354e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003550:	4628      	mov	r0, r5
 8003552:	47b0      	blx	r6
 8003554:	2800      	cmp	r0, #0
 8003556:	dc06      	bgt.n	8003566 <__sflush_r+0xfe>
 8003558:	89a3      	ldrh	r3, [r4, #12]
 800355a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800355e:	81a3      	strh	r3, [r4, #12]
 8003560:	f04f 30ff 	mov.w	r0, #4294967295
 8003564:	e78e      	b.n	8003484 <__sflush_r+0x1c>
 8003566:	4407      	add	r7, r0
 8003568:	eba8 0800 	sub.w	r8, r8, r0
 800356c:	e7e9      	b.n	8003542 <__sflush_r+0xda>
 800356e:	bf00      	nop
 8003570:	20400001 	.word	0x20400001

08003574 <_fflush_r>:
 8003574:	b538      	push	{r3, r4, r5, lr}
 8003576:	690b      	ldr	r3, [r1, #16]
 8003578:	4605      	mov	r5, r0
 800357a:	460c      	mov	r4, r1
 800357c:	b1db      	cbz	r3, 80035b6 <_fflush_r+0x42>
 800357e:	b118      	cbz	r0, 8003588 <_fflush_r+0x14>
 8003580:	6983      	ldr	r3, [r0, #24]
 8003582:	b90b      	cbnz	r3, 8003588 <_fflush_r+0x14>
 8003584:	f000 f860 	bl	8003648 <__sinit>
 8003588:	4b0c      	ldr	r3, [pc, #48]	; (80035bc <_fflush_r+0x48>)
 800358a:	429c      	cmp	r4, r3
 800358c:	d109      	bne.n	80035a2 <_fflush_r+0x2e>
 800358e:	686c      	ldr	r4, [r5, #4]
 8003590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003594:	b17b      	cbz	r3, 80035b6 <_fflush_r+0x42>
 8003596:	4621      	mov	r1, r4
 8003598:	4628      	mov	r0, r5
 800359a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800359e:	f7ff bf63 	b.w	8003468 <__sflush_r>
 80035a2:	4b07      	ldr	r3, [pc, #28]	; (80035c0 <_fflush_r+0x4c>)
 80035a4:	429c      	cmp	r4, r3
 80035a6:	d101      	bne.n	80035ac <_fflush_r+0x38>
 80035a8:	68ac      	ldr	r4, [r5, #8]
 80035aa:	e7f1      	b.n	8003590 <_fflush_r+0x1c>
 80035ac:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <_fflush_r+0x50>)
 80035ae:	429c      	cmp	r4, r3
 80035b0:	bf08      	it	eq
 80035b2:	68ec      	ldreq	r4, [r5, #12]
 80035b4:	e7ec      	b.n	8003590 <_fflush_r+0x1c>
 80035b6:	2000      	movs	r0, #0
 80035b8:	bd38      	pop	{r3, r4, r5, pc}
 80035ba:	bf00      	nop
 80035bc:	080040e0 	.word	0x080040e0
 80035c0:	08004100 	.word	0x08004100
 80035c4:	080040c0 	.word	0x080040c0

080035c8 <std>:
 80035c8:	2300      	movs	r3, #0
 80035ca:	b510      	push	{r4, lr}
 80035cc:	4604      	mov	r4, r0
 80035ce:	e9c0 3300 	strd	r3, r3, [r0]
 80035d2:	6083      	str	r3, [r0, #8]
 80035d4:	8181      	strh	r1, [r0, #12]
 80035d6:	6643      	str	r3, [r0, #100]	; 0x64
 80035d8:	81c2      	strh	r2, [r0, #14]
 80035da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80035de:	6183      	str	r3, [r0, #24]
 80035e0:	4619      	mov	r1, r3
 80035e2:	2208      	movs	r2, #8
 80035e4:	305c      	adds	r0, #92	; 0x5c
 80035e6:	f7ff fdfb 	bl	80031e0 <memset>
 80035ea:	4b05      	ldr	r3, [pc, #20]	; (8003600 <std+0x38>)
 80035ec:	6263      	str	r3, [r4, #36]	; 0x24
 80035ee:	4b05      	ldr	r3, [pc, #20]	; (8003604 <std+0x3c>)
 80035f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80035f2:	4b05      	ldr	r3, [pc, #20]	; (8003608 <std+0x40>)
 80035f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80035f6:	4b05      	ldr	r3, [pc, #20]	; (800360c <std+0x44>)
 80035f8:	6224      	str	r4, [r4, #32]
 80035fa:	6323      	str	r3, [r4, #48]	; 0x30
 80035fc:	bd10      	pop	{r4, pc}
 80035fe:	bf00      	nop
 8003600:	08003f25 	.word	0x08003f25
 8003604:	08003f47 	.word	0x08003f47
 8003608:	08003f7f 	.word	0x08003f7f
 800360c:	08003fa3 	.word	0x08003fa3

08003610 <_cleanup_r>:
 8003610:	4901      	ldr	r1, [pc, #4]	; (8003618 <_cleanup_r+0x8>)
 8003612:	f000 b885 	b.w	8003720 <_fwalk_reent>
 8003616:	bf00      	nop
 8003618:	08003575 	.word	0x08003575

0800361c <__sfmoreglue>:
 800361c:	b570      	push	{r4, r5, r6, lr}
 800361e:	1e4a      	subs	r2, r1, #1
 8003620:	2568      	movs	r5, #104	; 0x68
 8003622:	4355      	muls	r5, r2
 8003624:	460e      	mov	r6, r1
 8003626:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800362a:	f000 f949 	bl	80038c0 <_malloc_r>
 800362e:	4604      	mov	r4, r0
 8003630:	b140      	cbz	r0, 8003644 <__sfmoreglue+0x28>
 8003632:	2100      	movs	r1, #0
 8003634:	e9c0 1600 	strd	r1, r6, [r0]
 8003638:	300c      	adds	r0, #12
 800363a:	60a0      	str	r0, [r4, #8]
 800363c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003640:	f7ff fdce 	bl	80031e0 <memset>
 8003644:	4620      	mov	r0, r4
 8003646:	bd70      	pop	{r4, r5, r6, pc}

08003648 <__sinit>:
 8003648:	6983      	ldr	r3, [r0, #24]
 800364a:	b510      	push	{r4, lr}
 800364c:	4604      	mov	r4, r0
 800364e:	bb33      	cbnz	r3, 800369e <__sinit+0x56>
 8003650:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003654:	6503      	str	r3, [r0, #80]	; 0x50
 8003656:	4b12      	ldr	r3, [pc, #72]	; (80036a0 <__sinit+0x58>)
 8003658:	4a12      	ldr	r2, [pc, #72]	; (80036a4 <__sinit+0x5c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6282      	str	r2, [r0, #40]	; 0x28
 800365e:	4298      	cmp	r0, r3
 8003660:	bf04      	itt	eq
 8003662:	2301      	moveq	r3, #1
 8003664:	6183      	streq	r3, [r0, #24]
 8003666:	f000 f81f 	bl	80036a8 <__sfp>
 800366a:	6060      	str	r0, [r4, #4]
 800366c:	4620      	mov	r0, r4
 800366e:	f000 f81b 	bl	80036a8 <__sfp>
 8003672:	60a0      	str	r0, [r4, #8]
 8003674:	4620      	mov	r0, r4
 8003676:	f000 f817 	bl	80036a8 <__sfp>
 800367a:	2200      	movs	r2, #0
 800367c:	60e0      	str	r0, [r4, #12]
 800367e:	2104      	movs	r1, #4
 8003680:	6860      	ldr	r0, [r4, #4]
 8003682:	f7ff ffa1 	bl	80035c8 <std>
 8003686:	2201      	movs	r2, #1
 8003688:	2109      	movs	r1, #9
 800368a:	68a0      	ldr	r0, [r4, #8]
 800368c:	f7ff ff9c 	bl	80035c8 <std>
 8003690:	2202      	movs	r2, #2
 8003692:	2112      	movs	r1, #18
 8003694:	68e0      	ldr	r0, [r4, #12]
 8003696:	f7ff ff97 	bl	80035c8 <std>
 800369a:	2301      	movs	r3, #1
 800369c:	61a3      	str	r3, [r4, #24]
 800369e:	bd10      	pop	{r4, pc}
 80036a0:	080040bc 	.word	0x080040bc
 80036a4:	08003611 	.word	0x08003611

080036a8 <__sfp>:
 80036a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036aa:	4b1b      	ldr	r3, [pc, #108]	; (8003718 <__sfp+0x70>)
 80036ac:	681e      	ldr	r6, [r3, #0]
 80036ae:	69b3      	ldr	r3, [r6, #24]
 80036b0:	4607      	mov	r7, r0
 80036b2:	b913      	cbnz	r3, 80036ba <__sfp+0x12>
 80036b4:	4630      	mov	r0, r6
 80036b6:	f7ff ffc7 	bl	8003648 <__sinit>
 80036ba:	3648      	adds	r6, #72	; 0x48
 80036bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80036c0:	3b01      	subs	r3, #1
 80036c2:	d503      	bpl.n	80036cc <__sfp+0x24>
 80036c4:	6833      	ldr	r3, [r6, #0]
 80036c6:	b133      	cbz	r3, 80036d6 <__sfp+0x2e>
 80036c8:	6836      	ldr	r6, [r6, #0]
 80036ca:	e7f7      	b.n	80036bc <__sfp+0x14>
 80036cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80036d0:	b16d      	cbz	r5, 80036ee <__sfp+0x46>
 80036d2:	3468      	adds	r4, #104	; 0x68
 80036d4:	e7f4      	b.n	80036c0 <__sfp+0x18>
 80036d6:	2104      	movs	r1, #4
 80036d8:	4638      	mov	r0, r7
 80036da:	f7ff ff9f 	bl	800361c <__sfmoreglue>
 80036de:	6030      	str	r0, [r6, #0]
 80036e0:	2800      	cmp	r0, #0
 80036e2:	d1f1      	bne.n	80036c8 <__sfp+0x20>
 80036e4:	230c      	movs	r3, #12
 80036e6:	603b      	str	r3, [r7, #0]
 80036e8:	4604      	mov	r4, r0
 80036ea:	4620      	mov	r0, r4
 80036ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036ee:	4b0b      	ldr	r3, [pc, #44]	; (800371c <__sfp+0x74>)
 80036f0:	6665      	str	r5, [r4, #100]	; 0x64
 80036f2:	e9c4 5500 	strd	r5, r5, [r4]
 80036f6:	60a5      	str	r5, [r4, #8]
 80036f8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80036fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003700:	2208      	movs	r2, #8
 8003702:	4629      	mov	r1, r5
 8003704:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003708:	f7ff fd6a 	bl	80031e0 <memset>
 800370c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003710:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003714:	e7e9      	b.n	80036ea <__sfp+0x42>
 8003716:	bf00      	nop
 8003718:	080040bc 	.word	0x080040bc
 800371c:	ffff0001 	.word	0xffff0001

08003720 <_fwalk_reent>:
 8003720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003724:	4680      	mov	r8, r0
 8003726:	4689      	mov	r9, r1
 8003728:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800372c:	2600      	movs	r6, #0
 800372e:	b914      	cbnz	r4, 8003736 <_fwalk_reent+0x16>
 8003730:	4630      	mov	r0, r6
 8003732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003736:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800373a:	3f01      	subs	r7, #1
 800373c:	d501      	bpl.n	8003742 <_fwalk_reent+0x22>
 800373e:	6824      	ldr	r4, [r4, #0]
 8003740:	e7f5      	b.n	800372e <_fwalk_reent+0xe>
 8003742:	89ab      	ldrh	r3, [r5, #12]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d907      	bls.n	8003758 <_fwalk_reent+0x38>
 8003748:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800374c:	3301      	adds	r3, #1
 800374e:	d003      	beq.n	8003758 <_fwalk_reent+0x38>
 8003750:	4629      	mov	r1, r5
 8003752:	4640      	mov	r0, r8
 8003754:	47c8      	blx	r9
 8003756:	4306      	orrs	r6, r0
 8003758:	3568      	adds	r5, #104	; 0x68
 800375a:	e7ee      	b.n	800373a <_fwalk_reent+0x1a>

0800375c <__swhatbuf_r>:
 800375c:	b570      	push	{r4, r5, r6, lr}
 800375e:	460e      	mov	r6, r1
 8003760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003764:	2900      	cmp	r1, #0
 8003766:	b096      	sub	sp, #88	; 0x58
 8003768:	4614      	mov	r4, r2
 800376a:	461d      	mov	r5, r3
 800376c:	da07      	bge.n	800377e <__swhatbuf_r+0x22>
 800376e:	2300      	movs	r3, #0
 8003770:	602b      	str	r3, [r5, #0]
 8003772:	89b3      	ldrh	r3, [r6, #12]
 8003774:	061a      	lsls	r2, r3, #24
 8003776:	d410      	bmi.n	800379a <__swhatbuf_r+0x3e>
 8003778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800377c:	e00e      	b.n	800379c <__swhatbuf_r+0x40>
 800377e:	466a      	mov	r2, sp
 8003780:	f000 fc36 	bl	8003ff0 <_fstat_r>
 8003784:	2800      	cmp	r0, #0
 8003786:	dbf2      	blt.n	800376e <__swhatbuf_r+0x12>
 8003788:	9a01      	ldr	r2, [sp, #4]
 800378a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800378e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003792:	425a      	negs	r2, r3
 8003794:	415a      	adcs	r2, r3
 8003796:	602a      	str	r2, [r5, #0]
 8003798:	e7ee      	b.n	8003778 <__swhatbuf_r+0x1c>
 800379a:	2340      	movs	r3, #64	; 0x40
 800379c:	2000      	movs	r0, #0
 800379e:	6023      	str	r3, [r4, #0]
 80037a0:	b016      	add	sp, #88	; 0x58
 80037a2:	bd70      	pop	{r4, r5, r6, pc}

080037a4 <__smakebuf_r>:
 80037a4:	898b      	ldrh	r3, [r1, #12]
 80037a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80037a8:	079d      	lsls	r5, r3, #30
 80037aa:	4606      	mov	r6, r0
 80037ac:	460c      	mov	r4, r1
 80037ae:	d507      	bpl.n	80037c0 <__smakebuf_r+0x1c>
 80037b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80037b4:	6023      	str	r3, [r4, #0]
 80037b6:	6123      	str	r3, [r4, #16]
 80037b8:	2301      	movs	r3, #1
 80037ba:	6163      	str	r3, [r4, #20]
 80037bc:	b002      	add	sp, #8
 80037be:	bd70      	pop	{r4, r5, r6, pc}
 80037c0:	ab01      	add	r3, sp, #4
 80037c2:	466a      	mov	r2, sp
 80037c4:	f7ff ffca 	bl	800375c <__swhatbuf_r>
 80037c8:	9900      	ldr	r1, [sp, #0]
 80037ca:	4605      	mov	r5, r0
 80037cc:	4630      	mov	r0, r6
 80037ce:	f000 f877 	bl	80038c0 <_malloc_r>
 80037d2:	b948      	cbnz	r0, 80037e8 <__smakebuf_r+0x44>
 80037d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037d8:	059a      	lsls	r2, r3, #22
 80037da:	d4ef      	bmi.n	80037bc <__smakebuf_r+0x18>
 80037dc:	f023 0303 	bic.w	r3, r3, #3
 80037e0:	f043 0302 	orr.w	r3, r3, #2
 80037e4:	81a3      	strh	r3, [r4, #12]
 80037e6:	e7e3      	b.n	80037b0 <__smakebuf_r+0xc>
 80037e8:	4b0d      	ldr	r3, [pc, #52]	; (8003820 <__smakebuf_r+0x7c>)
 80037ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80037ec:	89a3      	ldrh	r3, [r4, #12]
 80037ee:	6020      	str	r0, [r4, #0]
 80037f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037f4:	81a3      	strh	r3, [r4, #12]
 80037f6:	9b00      	ldr	r3, [sp, #0]
 80037f8:	6163      	str	r3, [r4, #20]
 80037fa:	9b01      	ldr	r3, [sp, #4]
 80037fc:	6120      	str	r0, [r4, #16]
 80037fe:	b15b      	cbz	r3, 8003818 <__smakebuf_r+0x74>
 8003800:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003804:	4630      	mov	r0, r6
 8003806:	f000 fc05 	bl	8004014 <_isatty_r>
 800380a:	b128      	cbz	r0, 8003818 <__smakebuf_r+0x74>
 800380c:	89a3      	ldrh	r3, [r4, #12]
 800380e:	f023 0303 	bic.w	r3, r3, #3
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	81a3      	strh	r3, [r4, #12]
 8003818:	89a3      	ldrh	r3, [r4, #12]
 800381a:	431d      	orrs	r5, r3
 800381c:	81a5      	strh	r5, [r4, #12]
 800381e:	e7cd      	b.n	80037bc <__smakebuf_r+0x18>
 8003820:	08003611 	.word	0x08003611

08003824 <_free_r>:
 8003824:	b538      	push	{r3, r4, r5, lr}
 8003826:	4605      	mov	r5, r0
 8003828:	2900      	cmp	r1, #0
 800382a:	d045      	beq.n	80038b8 <_free_r+0x94>
 800382c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003830:	1f0c      	subs	r4, r1, #4
 8003832:	2b00      	cmp	r3, #0
 8003834:	bfb8      	it	lt
 8003836:	18e4      	addlt	r4, r4, r3
 8003838:	f000 fc0e 	bl	8004058 <__malloc_lock>
 800383c:	4a1f      	ldr	r2, [pc, #124]	; (80038bc <_free_r+0x98>)
 800383e:	6813      	ldr	r3, [r2, #0]
 8003840:	4610      	mov	r0, r2
 8003842:	b933      	cbnz	r3, 8003852 <_free_r+0x2e>
 8003844:	6063      	str	r3, [r4, #4]
 8003846:	6014      	str	r4, [r2, #0]
 8003848:	4628      	mov	r0, r5
 800384a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800384e:	f000 bc04 	b.w	800405a <__malloc_unlock>
 8003852:	42a3      	cmp	r3, r4
 8003854:	d90c      	bls.n	8003870 <_free_r+0x4c>
 8003856:	6821      	ldr	r1, [r4, #0]
 8003858:	1862      	adds	r2, r4, r1
 800385a:	4293      	cmp	r3, r2
 800385c:	bf04      	itt	eq
 800385e:	681a      	ldreq	r2, [r3, #0]
 8003860:	685b      	ldreq	r3, [r3, #4]
 8003862:	6063      	str	r3, [r4, #4]
 8003864:	bf04      	itt	eq
 8003866:	1852      	addeq	r2, r2, r1
 8003868:	6022      	streq	r2, [r4, #0]
 800386a:	6004      	str	r4, [r0, #0]
 800386c:	e7ec      	b.n	8003848 <_free_r+0x24>
 800386e:	4613      	mov	r3, r2
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	b10a      	cbz	r2, 8003878 <_free_r+0x54>
 8003874:	42a2      	cmp	r2, r4
 8003876:	d9fa      	bls.n	800386e <_free_r+0x4a>
 8003878:	6819      	ldr	r1, [r3, #0]
 800387a:	1858      	adds	r0, r3, r1
 800387c:	42a0      	cmp	r0, r4
 800387e:	d10b      	bne.n	8003898 <_free_r+0x74>
 8003880:	6820      	ldr	r0, [r4, #0]
 8003882:	4401      	add	r1, r0
 8003884:	1858      	adds	r0, r3, r1
 8003886:	4282      	cmp	r2, r0
 8003888:	6019      	str	r1, [r3, #0]
 800388a:	d1dd      	bne.n	8003848 <_free_r+0x24>
 800388c:	6810      	ldr	r0, [r2, #0]
 800388e:	6852      	ldr	r2, [r2, #4]
 8003890:	605a      	str	r2, [r3, #4]
 8003892:	4401      	add	r1, r0
 8003894:	6019      	str	r1, [r3, #0]
 8003896:	e7d7      	b.n	8003848 <_free_r+0x24>
 8003898:	d902      	bls.n	80038a0 <_free_r+0x7c>
 800389a:	230c      	movs	r3, #12
 800389c:	602b      	str	r3, [r5, #0]
 800389e:	e7d3      	b.n	8003848 <_free_r+0x24>
 80038a0:	6820      	ldr	r0, [r4, #0]
 80038a2:	1821      	adds	r1, r4, r0
 80038a4:	428a      	cmp	r2, r1
 80038a6:	bf04      	itt	eq
 80038a8:	6811      	ldreq	r1, [r2, #0]
 80038aa:	6852      	ldreq	r2, [r2, #4]
 80038ac:	6062      	str	r2, [r4, #4]
 80038ae:	bf04      	itt	eq
 80038b0:	1809      	addeq	r1, r1, r0
 80038b2:	6021      	streq	r1, [r4, #0]
 80038b4:	605c      	str	r4, [r3, #4]
 80038b6:	e7c7      	b.n	8003848 <_free_r+0x24>
 80038b8:	bd38      	pop	{r3, r4, r5, pc}
 80038ba:	bf00      	nop
 80038bc:	20000094 	.word	0x20000094

080038c0 <_malloc_r>:
 80038c0:	b570      	push	{r4, r5, r6, lr}
 80038c2:	1ccd      	adds	r5, r1, #3
 80038c4:	f025 0503 	bic.w	r5, r5, #3
 80038c8:	3508      	adds	r5, #8
 80038ca:	2d0c      	cmp	r5, #12
 80038cc:	bf38      	it	cc
 80038ce:	250c      	movcc	r5, #12
 80038d0:	2d00      	cmp	r5, #0
 80038d2:	4606      	mov	r6, r0
 80038d4:	db01      	blt.n	80038da <_malloc_r+0x1a>
 80038d6:	42a9      	cmp	r1, r5
 80038d8:	d903      	bls.n	80038e2 <_malloc_r+0x22>
 80038da:	230c      	movs	r3, #12
 80038dc:	6033      	str	r3, [r6, #0]
 80038de:	2000      	movs	r0, #0
 80038e0:	bd70      	pop	{r4, r5, r6, pc}
 80038e2:	f000 fbb9 	bl	8004058 <__malloc_lock>
 80038e6:	4a21      	ldr	r2, [pc, #132]	; (800396c <_malloc_r+0xac>)
 80038e8:	6814      	ldr	r4, [r2, #0]
 80038ea:	4621      	mov	r1, r4
 80038ec:	b991      	cbnz	r1, 8003914 <_malloc_r+0x54>
 80038ee:	4c20      	ldr	r4, [pc, #128]	; (8003970 <_malloc_r+0xb0>)
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	b91b      	cbnz	r3, 80038fc <_malloc_r+0x3c>
 80038f4:	4630      	mov	r0, r6
 80038f6:	f000 fb05 	bl	8003f04 <_sbrk_r>
 80038fa:	6020      	str	r0, [r4, #0]
 80038fc:	4629      	mov	r1, r5
 80038fe:	4630      	mov	r0, r6
 8003900:	f000 fb00 	bl	8003f04 <_sbrk_r>
 8003904:	1c43      	adds	r3, r0, #1
 8003906:	d124      	bne.n	8003952 <_malloc_r+0x92>
 8003908:	230c      	movs	r3, #12
 800390a:	6033      	str	r3, [r6, #0]
 800390c:	4630      	mov	r0, r6
 800390e:	f000 fba4 	bl	800405a <__malloc_unlock>
 8003912:	e7e4      	b.n	80038de <_malloc_r+0x1e>
 8003914:	680b      	ldr	r3, [r1, #0]
 8003916:	1b5b      	subs	r3, r3, r5
 8003918:	d418      	bmi.n	800394c <_malloc_r+0x8c>
 800391a:	2b0b      	cmp	r3, #11
 800391c:	d90f      	bls.n	800393e <_malloc_r+0x7e>
 800391e:	600b      	str	r3, [r1, #0]
 8003920:	50cd      	str	r5, [r1, r3]
 8003922:	18cc      	adds	r4, r1, r3
 8003924:	4630      	mov	r0, r6
 8003926:	f000 fb98 	bl	800405a <__malloc_unlock>
 800392a:	f104 000b 	add.w	r0, r4, #11
 800392e:	1d23      	adds	r3, r4, #4
 8003930:	f020 0007 	bic.w	r0, r0, #7
 8003934:	1ac3      	subs	r3, r0, r3
 8003936:	d0d3      	beq.n	80038e0 <_malloc_r+0x20>
 8003938:	425a      	negs	r2, r3
 800393a:	50e2      	str	r2, [r4, r3]
 800393c:	e7d0      	b.n	80038e0 <_malloc_r+0x20>
 800393e:	428c      	cmp	r4, r1
 8003940:	684b      	ldr	r3, [r1, #4]
 8003942:	bf16      	itet	ne
 8003944:	6063      	strne	r3, [r4, #4]
 8003946:	6013      	streq	r3, [r2, #0]
 8003948:	460c      	movne	r4, r1
 800394a:	e7eb      	b.n	8003924 <_malloc_r+0x64>
 800394c:	460c      	mov	r4, r1
 800394e:	6849      	ldr	r1, [r1, #4]
 8003950:	e7cc      	b.n	80038ec <_malloc_r+0x2c>
 8003952:	1cc4      	adds	r4, r0, #3
 8003954:	f024 0403 	bic.w	r4, r4, #3
 8003958:	42a0      	cmp	r0, r4
 800395a:	d005      	beq.n	8003968 <_malloc_r+0xa8>
 800395c:	1a21      	subs	r1, r4, r0
 800395e:	4630      	mov	r0, r6
 8003960:	f000 fad0 	bl	8003f04 <_sbrk_r>
 8003964:	3001      	adds	r0, #1
 8003966:	d0cf      	beq.n	8003908 <_malloc_r+0x48>
 8003968:	6025      	str	r5, [r4, #0]
 800396a:	e7db      	b.n	8003924 <_malloc_r+0x64>
 800396c:	20000094 	.word	0x20000094
 8003970:	20000098 	.word	0x20000098

08003974 <__sfputc_r>:
 8003974:	6893      	ldr	r3, [r2, #8]
 8003976:	3b01      	subs	r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	b410      	push	{r4}
 800397c:	6093      	str	r3, [r2, #8]
 800397e:	da08      	bge.n	8003992 <__sfputc_r+0x1e>
 8003980:	6994      	ldr	r4, [r2, #24]
 8003982:	42a3      	cmp	r3, r4
 8003984:	db01      	blt.n	800398a <__sfputc_r+0x16>
 8003986:	290a      	cmp	r1, #10
 8003988:	d103      	bne.n	8003992 <__sfputc_r+0x1e>
 800398a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800398e:	f7ff bcab 	b.w	80032e8 <__swbuf_r>
 8003992:	6813      	ldr	r3, [r2, #0]
 8003994:	1c58      	adds	r0, r3, #1
 8003996:	6010      	str	r0, [r2, #0]
 8003998:	7019      	strb	r1, [r3, #0]
 800399a:	4608      	mov	r0, r1
 800399c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <__sfputs_r>:
 80039a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a4:	4606      	mov	r6, r0
 80039a6:	460f      	mov	r7, r1
 80039a8:	4614      	mov	r4, r2
 80039aa:	18d5      	adds	r5, r2, r3
 80039ac:	42ac      	cmp	r4, r5
 80039ae:	d101      	bne.n	80039b4 <__sfputs_r+0x12>
 80039b0:	2000      	movs	r0, #0
 80039b2:	e007      	b.n	80039c4 <__sfputs_r+0x22>
 80039b4:	463a      	mov	r2, r7
 80039b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039ba:	4630      	mov	r0, r6
 80039bc:	f7ff ffda 	bl	8003974 <__sfputc_r>
 80039c0:	1c43      	adds	r3, r0, #1
 80039c2:	d1f3      	bne.n	80039ac <__sfputs_r+0xa>
 80039c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080039c8 <_vfiprintf_r>:
 80039c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039cc:	460c      	mov	r4, r1
 80039ce:	b09d      	sub	sp, #116	; 0x74
 80039d0:	4617      	mov	r7, r2
 80039d2:	461d      	mov	r5, r3
 80039d4:	4606      	mov	r6, r0
 80039d6:	b118      	cbz	r0, 80039e0 <_vfiprintf_r+0x18>
 80039d8:	6983      	ldr	r3, [r0, #24]
 80039da:	b90b      	cbnz	r3, 80039e0 <_vfiprintf_r+0x18>
 80039dc:	f7ff fe34 	bl	8003648 <__sinit>
 80039e0:	4b7c      	ldr	r3, [pc, #496]	; (8003bd4 <_vfiprintf_r+0x20c>)
 80039e2:	429c      	cmp	r4, r3
 80039e4:	d158      	bne.n	8003a98 <_vfiprintf_r+0xd0>
 80039e6:	6874      	ldr	r4, [r6, #4]
 80039e8:	89a3      	ldrh	r3, [r4, #12]
 80039ea:	0718      	lsls	r0, r3, #28
 80039ec:	d55e      	bpl.n	8003aac <_vfiprintf_r+0xe4>
 80039ee:	6923      	ldr	r3, [r4, #16]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d05b      	beq.n	8003aac <_vfiprintf_r+0xe4>
 80039f4:	2300      	movs	r3, #0
 80039f6:	9309      	str	r3, [sp, #36]	; 0x24
 80039f8:	2320      	movs	r3, #32
 80039fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039fe:	2330      	movs	r3, #48	; 0x30
 8003a00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003a04:	9503      	str	r5, [sp, #12]
 8003a06:	f04f 0b01 	mov.w	fp, #1
 8003a0a:	46b8      	mov	r8, r7
 8003a0c:	4645      	mov	r5, r8
 8003a0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003a12:	b10b      	cbz	r3, 8003a18 <_vfiprintf_r+0x50>
 8003a14:	2b25      	cmp	r3, #37	; 0x25
 8003a16:	d154      	bne.n	8003ac2 <_vfiprintf_r+0xfa>
 8003a18:	ebb8 0a07 	subs.w	sl, r8, r7
 8003a1c:	d00b      	beq.n	8003a36 <_vfiprintf_r+0x6e>
 8003a1e:	4653      	mov	r3, sl
 8003a20:	463a      	mov	r2, r7
 8003a22:	4621      	mov	r1, r4
 8003a24:	4630      	mov	r0, r6
 8003a26:	f7ff ffbc 	bl	80039a2 <__sfputs_r>
 8003a2a:	3001      	adds	r0, #1
 8003a2c:	f000 80c2 	beq.w	8003bb4 <_vfiprintf_r+0x1ec>
 8003a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a32:	4453      	add	r3, sl
 8003a34:	9309      	str	r3, [sp, #36]	; 0x24
 8003a36:	f898 3000 	ldrb.w	r3, [r8]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 80ba 	beq.w	8003bb4 <_vfiprintf_r+0x1ec>
 8003a40:	2300      	movs	r3, #0
 8003a42:	f04f 32ff 	mov.w	r2, #4294967295
 8003a46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a4a:	9304      	str	r3, [sp, #16]
 8003a4c:	9307      	str	r3, [sp, #28]
 8003a4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a52:	931a      	str	r3, [sp, #104]	; 0x68
 8003a54:	46a8      	mov	r8, r5
 8003a56:	2205      	movs	r2, #5
 8003a58:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003a5c:	485e      	ldr	r0, [pc, #376]	; (8003bd8 <_vfiprintf_r+0x210>)
 8003a5e:	f7fc fbb7 	bl	80001d0 <memchr>
 8003a62:	9b04      	ldr	r3, [sp, #16]
 8003a64:	bb78      	cbnz	r0, 8003ac6 <_vfiprintf_r+0xfe>
 8003a66:	06d9      	lsls	r1, r3, #27
 8003a68:	bf44      	itt	mi
 8003a6a:	2220      	movmi	r2, #32
 8003a6c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a70:	071a      	lsls	r2, r3, #28
 8003a72:	bf44      	itt	mi
 8003a74:	222b      	movmi	r2, #43	; 0x2b
 8003a76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a7a:	782a      	ldrb	r2, [r5, #0]
 8003a7c:	2a2a      	cmp	r2, #42	; 0x2a
 8003a7e:	d02a      	beq.n	8003ad6 <_vfiprintf_r+0x10e>
 8003a80:	9a07      	ldr	r2, [sp, #28]
 8003a82:	46a8      	mov	r8, r5
 8003a84:	2000      	movs	r0, #0
 8003a86:	250a      	movs	r5, #10
 8003a88:	4641      	mov	r1, r8
 8003a8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a8e:	3b30      	subs	r3, #48	; 0x30
 8003a90:	2b09      	cmp	r3, #9
 8003a92:	d969      	bls.n	8003b68 <_vfiprintf_r+0x1a0>
 8003a94:	b360      	cbz	r0, 8003af0 <_vfiprintf_r+0x128>
 8003a96:	e024      	b.n	8003ae2 <_vfiprintf_r+0x11a>
 8003a98:	4b50      	ldr	r3, [pc, #320]	; (8003bdc <_vfiprintf_r+0x214>)
 8003a9a:	429c      	cmp	r4, r3
 8003a9c:	d101      	bne.n	8003aa2 <_vfiprintf_r+0xda>
 8003a9e:	68b4      	ldr	r4, [r6, #8]
 8003aa0:	e7a2      	b.n	80039e8 <_vfiprintf_r+0x20>
 8003aa2:	4b4f      	ldr	r3, [pc, #316]	; (8003be0 <_vfiprintf_r+0x218>)
 8003aa4:	429c      	cmp	r4, r3
 8003aa6:	bf08      	it	eq
 8003aa8:	68f4      	ldreq	r4, [r6, #12]
 8003aaa:	e79d      	b.n	80039e8 <_vfiprintf_r+0x20>
 8003aac:	4621      	mov	r1, r4
 8003aae:	4630      	mov	r0, r6
 8003ab0:	f7ff fc6c 	bl	800338c <__swsetup_r>
 8003ab4:	2800      	cmp	r0, #0
 8003ab6:	d09d      	beq.n	80039f4 <_vfiprintf_r+0x2c>
 8003ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8003abc:	b01d      	add	sp, #116	; 0x74
 8003abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ac2:	46a8      	mov	r8, r5
 8003ac4:	e7a2      	b.n	8003a0c <_vfiprintf_r+0x44>
 8003ac6:	4a44      	ldr	r2, [pc, #272]	; (8003bd8 <_vfiprintf_r+0x210>)
 8003ac8:	1a80      	subs	r0, r0, r2
 8003aca:	fa0b f000 	lsl.w	r0, fp, r0
 8003ace:	4318      	orrs	r0, r3
 8003ad0:	9004      	str	r0, [sp, #16]
 8003ad2:	4645      	mov	r5, r8
 8003ad4:	e7be      	b.n	8003a54 <_vfiprintf_r+0x8c>
 8003ad6:	9a03      	ldr	r2, [sp, #12]
 8003ad8:	1d11      	adds	r1, r2, #4
 8003ada:	6812      	ldr	r2, [r2, #0]
 8003adc:	9103      	str	r1, [sp, #12]
 8003ade:	2a00      	cmp	r2, #0
 8003ae0:	db01      	blt.n	8003ae6 <_vfiprintf_r+0x11e>
 8003ae2:	9207      	str	r2, [sp, #28]
 8003ae4:	e004      	b.n	8003af0 <_vfiprintf_r+0x128>
 8003ae6:	4252      	negs	r2, r2
 8003ae8:	f043 0302 	orr.w	r3, r3, #2
 8003aec:	9207      	str	r2, [sp, #28]
 8003aee:	9304      	str	r3, [sp, #16]
 8003af0:	f898 3000 	ldrb.w	r3, [r8]
 8003af4:	2b2e      	cmp	r3, #46	; 0x2e
 8003af6:	d10e      	bne.n	8003b16 <_vfiprintf_r+0x14e>
 8003af8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003afc:	2b2a      	cmp	r3, #42	; 0x2a
 8003afe:	d138      	bne.n	8003b72 <_vfiprintf_r+0x1aa>
 8003b00:	9b03      	ldr	r3, [sp, #12]
 8003b02:	1d1a      	adds	r2, r3, #4
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	9203      	str	r2, [sp, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	bfb8      	it	lt
 8003b0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003b10:	f108 0802 	add.w	r8, r8, #2
 8003b14:	9305      	str	r3, [sp, #20]
 8003b16:	4d33      	ldr	r5, [pc, #204]	; (8003be4 <_vfiprintf_r+0x21c>)
 8003b18:	f898 1000 	ldrb.w	r1, [r8]
 8003b1c:	2203      	movs	r2, #3
 8003b1e:	4628      	mov	r0, r5
 8003b20:	f7fc fb56 	bl	80001d0 <memchr>
 8003b24:	b140      	cbz	r0, 8003b38 <_vfiprintf_r+0x170>
 8003b26:	2340      	movs	r3, #64	; 0x40
 8003b28:	1b40      	subs	r0, r0, r5
 8003b2a:	fa03 f000 	lsl.w	r0, r3, r0
 8003b2e:	9b04      	ldr	r3, [sp, #16]
 8003b30:	4303      	orrs	r3, r0
 8003b32:	f108 0801 	add.w	r8, r8, #1
 8003b36:	9304      	str	r3, [sp, #16]
 8003b38:	f898 1000 	ldrb.w	r1, [r8]
 8003b3c:	482a      	ldr	r0, [pc, #168]	; (8003be8 <_vfiprintf_r+0x220>)
 8003b3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b42:	2206      	movs	r2, #6
 8003b44:	f108 0701 	add.w	r7, r8, #1
 8003b48:	f7fc fb42 	bl	80001d0 <memchr>
 8003b4c:	2800      	cmp	r0, #0
 8003b4e:	d037      	beq.n	8003bc0 <_vfiprintf_r+0x1f8>
 8003b50:	4b26      	ldr	r3, [pc, #152]	; (8003bec <_vfiprintf_r+0x224>)
 8003b52:	bb1b      	cbnz	r3, 8003b9c <_vfiprintf_r+0x1d4>
 8003b54:	9b03      	ldr	r3, [sp, #12]
 8003b56:	3307      	adds	r3, #7
 8003b58:	f023 0307 	bic.w	r3, r3, #7
 8003b5c:	3308      	adds	r3, #8
 8003b5e:	9303      	str	r3, [sp, #12]
 8003b60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b62:	444b      	add	r3, r9
 8003b64:	9309      	str	r3, [sp, #36]	; 0x24
 8003b66:	e750      	b.n	8003a0a <_vfiprintf_r+0x42>
 8003b68:	fb05 3202 	mla	r2, r5, r2, r3
 8003b6c:	2001      	movs	r0, #1
 8003b6e:	4688      	mov	r8, r1
 8003b70:	e78a      	b.n	8003a88 <_vfiprintf_r+0xc0>
 8003b72:	2300      	movs	r3, #0
 8003b74:	f108 0801 	add.w	r8, r8, #1
 8003b78:	9305      	str	r3, [sp, #20]
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	250a      	movs	r5, #10
 8003b7e:	4640      	mov	r0, r8
 8003b80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b84:	3a30      	subs	r2, #48	; 0x30
 8003b86:	2a09      	cmp	r2, #9
 8003b88:	d903      	bls.n	8003b92 <_vfiprintf_r+0x1ca>
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0c3      	beq.n	8003b16 <_vfiprintf_r+0x14e>
 8003b8e:	9105      	str	r1, [sp, #20]
 8003b90:	e7c1      	b.n	8003b16 <_vfiprintf_r+0x14e>
 8003b92:	fb05 2101 	mla	r1, r5, r1, r2
 8003b96:	2301      	movs	r3, #1
 8003b98:	4680      	mov	r8, r0
 8003b9a:	e7f0      	b.n	8003b7e <_vfiprintf_r+0x1b6>
 8003b9c:	ab03      	add	r3, sp, #12
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	4622      	mov	r2, r4
 8003ba2:	4b13      	ldr	r3, [pc, #76]	; (8003bf0 <_vfiprintf_r+0x228>)
 8003ba4:	a904      	add	r1, sp, #16
 8003ba6:	4630      	mov	r0, r6
 8003ba8:	f3af 8000 	nop.w
 8003bac:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003bb0:	4681      	mov	r9, r0
 8003bb2:	d1d5      	bne.n	8003b60 <_vfiprintf_r+0x198>
 8003bb4:	89a3      	ldrh	r3, [r4, #12]
 8003bb6:	065b      	lsls	r3, r3, #25
 8003bb8:	f53f af7e 	bmi.w	8003ab8 <_vfiprintf_r+0xf0>
 8003bbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003bbe:	e77d      	b.n	8003abc <_vfiprintf_r+0xf4>
 8003bc0:	ab03      	add	r3, sp, #12
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	4622      	mov	r2, r4
 8003bc6:	4b0a      	ldr	r3, [pc, #40]	; (8003bf0 <_vfiprintf_r+0x228>)
 8003bc8:	a904      	add	r1, sp, #16
 8003bca:	4630      	mov	r0, r6
 8003bcc:	f000 f888 	bl	8003ce0 <_printf_i>
 8003bd0:	e7ec      	b.n	8003bac <_vfiprintf_r+0x1e4>
 8003bd2:	bf00      	nop
 8003bd4:	080040e0 	.word	0x080040e0
 8003bd8:	08004120 	.word	0x08004120
 8003bdc:	08004100 	.word	0x08004100
 8003be0:	080040c0 	.word	0x080040c0
 8003be4:	08004126 	.word	0x08004126
 8003be8:	0800412a 	.word	0x0800412a
 8003bec:	00000000 	.word	0x00000000
 8003bf0:	080039a3 	.word	0x080039a3

08003bf4 <_printf_common>:
 8003bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bf8:	4691      	mov	r9, r2
 8003bfa:	461f      	mov	r7, r3
 8003bfc:	688a      	ldr	r2, [r1, #8]
 8003bfe:	690b      	ldr	r3, [r1, #16]
 8003c00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c04:	4293      	cmp	r3, r2
 8003c06:	bfb8      	it	lt
 8003c08:	4613      	movlt	r3, r2
 8003c0a:	f8c9 3000 	str.w	r3, [r9]
 8003c0e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c12:	4606      	mov	r6, r0
 8003c14:	460c      	mov	r4, r1
 8003c16:	b112      	cbz	r2, 8003c1e <_printf_common+0x2a>
 8003c18:	3301      	adds	r3, #1
 8003c1a:	f8c9 3000 	str.w	r3, [r9]
 8003c1e:	6823      	ldr	r3, [r4, #0]
 8003c20:	0699      	lsls	r1, r3, #26
 8003c22:	bf42      	ittt	mi
 8003c24:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003c28:	3302      	addmi	r3, #2
 8003c2a:	f8c9 3000 	strmi.w	r3, [r9]
 8003c2e:	6825      	ldr	r5, [r4, #0]
 8003c30:	f015 0506 	ands.w	r5, r5, #6
 8003c34:	d107      	bne.n	8003c46 <_printf_common+0x52>
 8003c36:	f104 0a19 	add.w	sl, r4, #25
 8003c3a:	68e3      	ldr	r3, [r4, #12]
 8003c3c:	f8d9 2000 	ldr.w	r2, [r9]
 8003c40:	1a9b      	subs	r3, r3, r2
 8003c42:	42ab      	cmp	r3, r5
 8003c44:	dc28      	bgt.n	8003c98 <_printf_common+0xa4>
 8003c46:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003c4a:	6822      	ldr	r2, [r4, #0]
 8003c4c:	3300      	adds	r3, #0
 8003c4e:	bf18      	it	ne
 8003c50:	2301      	movne	r3, #1
 8003c52:	0692      	lsls	r2, r2, #26
 8003c54:	d42d      	bmi.n	8003cb2 <_printf_common+0xbe>
 8003c56:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c5a:	4639      	mov	r1, r7
 8003c5c:	4630      	mov	r0, r6
 8003c5e:	47c0      	blx	r8
 8003c60:	3001      	adds	r0, #1
 8003c62:	d020      	beq.n	8003ca6 <_printf_common+0xb2>
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	68e5      	ldr	r5, [r4, #12]
 8003c68:	f8d9 2000 	ldr.w	r2, [r9]
 8003c6c:	f003 0306 	and.w	r3, r3, #6
 8003c70:	2b04      	cmp	r3, #4
 8003c72:	bf08      	it	eq
 8003c74:	1aad      	subeq	r5, r5, r2
 8003c76:	68a3      	ldr	r3, [r4, #8]
 8003c78:	6922      	ldr	r2, [r4, #16]
 8003c7a:	bf0c      	ite	eq
 8003c7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c80:	2500      	movne	r5, #0
 8003c82:	4293      	cmp	r3, r2
 8003c84:	bfc4      	itt	gt
 8003c86:	1a9b      	subgt	r3, r3, r2
 8003c88:	18ed      	addgt	r5, r5, r3
 8003c8a:	f04f 0900 	mov.w	r9, #0
 8003c8e:	341a      	adds	r4, #26
 8003c90:	454d      	cmp	r5, r9
 8003c92:	d11a      	bne.n	8003cca <_printf_common+0xd6>
 8003c94:	2000      	movs	r0, #0
 8003c96:	e008      	b.n	8003caa <_printf_common+0xb6>
 8003c98:	2301      	movs	r3, #1
 8003c9a:	4652      	mov	r2, sl
 8003c9c:	4639      	mov	r1, r7
 8003c9e:	4630      	mov	r0, r6
 8003ca0:	47c0      	blx	r8
 8003ca2:	3001      	adds	r0, #1
 8003ca4:	d103      	bne.n	8003cae <_printf_common+0xba>
 8003ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8003caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cae:	3501      	adds	r5, #1
 8003cb0:	e7c3      	b.n	8003c3a <_printf_common+0x46>
 8003cb2:	18e1      	adds	r1, r4, r3
 8003cb4:	1c5a      	adds	r2, r3, #1
 8003cb6:	2030      	movs	r0, #48	; 0x30
 8003cb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cbc:	4422      	add	r2, r4
 8003cbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003cc2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003cc6:	3302      	adds	r3, #2
 8003cc8:	e7c5      	b.n	8003c56 <_printf_common+0x62>
 8003cca:	2301      	movs	r3, #1
 8003ccc:	4622      	mov	r2, r4
 8003cce:	4639      	mov	r1, r7
 8003cd0:	4630      	mov	r0, r6
 8003cd2:	47c0      	blx	r8
 8003cd4:	3001      	adds	r0, #1
 8003cd6:	d0e6      	beq.n	8003ca6 <_printf_common+0xb2>
 8003cd8:	f109 0901 	add.w	r9, r9, #1
 8003cdc:	e7d8      	b.n	8003c90 <_printf_common+0x9c>
	...

08003ce0 <_printf_i>:
 8003ce0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ce4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003ce8:	460c      	mov	r4, r1
 8003cea:	7e09      	ldrb	r1, [r1, #24]
 8003cec:	b085      	sub	sp, #20
 8003cee:	296e      	cmp	r1, #110	; 0x6e
 8003cf0:	4617      	mov	r7, r2
 8003cf2:	4606      	mov	r6, r0
 8003cf4:	4698      	mov	r8, r3
 8003cf6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003cf8:	f000 80b3 	beq.w	8003e62 <_printf_i+0x182>
 8003cfc:	d822      	bhi.n	8003d44 <_printf_i+0x64>
 8003cfe:	2963      	cmp	r1, #99	; 0x63
 8003d00:	d036      	beq.n	8003d70 <_printf_i+0x90>
 8003d02:	d80a      	bhi.n	8003d1a <_printf_i+0x3a>
 8003d04:	2900      	cmp	r1, #0
 8003d06:	f000 80b9 	beq.w	8003e7c <_printf_i+0x19c>
 8003d0a:	2958      	cmp	r1, #88	; 0x58
 8003d0c:	f000 8083 	beq.w	8003e16 <_printf_i+0x136>
 8003d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d14:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003d18:	e032      	b.n	8003d80 <_printf_i+0xa0>
 8003d1a:	2964      	cmp	r1, #100	; 0x64
 8003d1c:	d001      	beq.n	8003d22 <_printf_i+0x42>
 8003d1e:	2969      	cmp	r1, #105	; 0x69
 8003d20:	d1f6      	bne.n	8003d10 <_printf_i+0x30>
 8003d22:	6820      	ldr	r0, [r4, #0]
 8003d24:	6813      	ldr	r3, [r2, #0]
 8003d26:	0605      	lsls	r5, r0, #24
 8003d28:	f103 0104 	add.w	r1, r3, #4
 8003d2c:	d52a      	bpl.n	8003d84 <_printf_i+0xa4>
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6011      	str	r1, [r2, #0]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	da03      	bge.n	8003d3e <_printf_i+0x5e>
 8003d36:	222d      	movs	r2, #45	; 0x2d
 8003d38:	425b      	negs	r3, r3
 8003d3a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003d3e:	486f      	ldr	r0, [pc, #444]	; (8003efc <_printf_i+0x21c>)
 8003d40:	220a      	movs	r2, #10
 8003d42:	e039      	b.n	8003db8 <_printf_i+0xd8>
 8003d44:	2973      	cmp	r1, #115	; 0x73
 8003d46:	f000 809d 	beq.w	8003e84 <_printf_i+0x1a4>
 8003d4a:	d808      	bhi.n	8003d5e <_printf_i+0x7e>
 8003d4c:	296f      	cmp	r1, #111	; 0x6f
 8003d4e:	d020      	beq.n	8003d92 <_printf_i+0xb2>
 8003d50:	2970      	cmp	r1, #112	; 0x70
 8003d52:	d1dd      	bne.n	8003d10 <_printf_i+0x30>
 8003d54:	6823      	ldr	r3, [r4, #0]
 8003d56:	f043 0320 	orr.w	r3, r3, #32
 8003d5a:	6023      	str	r3, [r4, #0]
 8003d5c:	e003      	b.n	8003d66 <_printf_i+0x86>
 8003d5e:	2975      	cmp	r1, #117	; 0x75
 8003d60:	d017      	beq.n	8003d92 <_printf_i+0xb2>
 8003d62:	2978      	cmp	r1, #120	; 0x78
 8003d64:	d1d4      	bne.n	8003d10 <_printf_i+0x30>
 8003d66:	2378      	movs	r3, #120	; 0x78
 8003d68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003d6c:	4864      	ldr	r0, [pc, #400]	; (8003f00 <_printf_i+0x220>)
 8003d6e:	e055      	b.n	8003e1c <_printf_i+0x13c>
 8003d70:	6813      	ldr	r3, [r2, #0]
 8003d72:	1d19      	adds	r1, r3, #4
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	6011      	str	r1, [r2, #0]
 8003d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d80:	2301      	movs	r3, #1
 8003d82:	e08c      	b.n	8003e9e <_printf_i+0x1be>
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6011      	str	r1, [r2, #0]
 8003d88:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d8c:	bf18      	it	ne
 8003d8e:	b21b      	sxthne	r3, r3
 8003d90:	e7cf      	b.n	8003d32 <_printf_i+0x52>
 8003d92:	6813      	ldr	r3, [r2, #0]
 8003d94:	6825      	ldr	r5, [r4, #0]
 8003d96:	1d18      	adds	r0, r3, #4
 8003d98:	6010      	str	r0, [r2, #0]
 8003d9a:	0628      	lsls	r0, r5, #24
 8003d9c:	d501      	bpl.n	8003da2 <_printf_i+0xc2>
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	e002      	b.n	8003da8 <_printf_i+0xc8>
 8003da2:	0668      	lsls	r0, r5, #25
 8003da4:	d5fb      	bpl.n	8003d9e <_printf_i+0xbe>
 8003da6:	881b      	ldrh	r3, [r3, #0]
 8003da8:	4854      	ldr	r0, [pc, #336]	; (8003efc <_printf_i+0x21c>)
 8003daa:	296f      	cmp	r1, #111	; 0x6f
 8003dac:	bf14      	ite	ne
 8003dae:	220a      	movne	r2, #10
 8003db0:	2208      	moveq	r2, #8
 8003db2:	2100      	movs	r1, #0
 8003db4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003db8:	6865      	ldr	r5, [r4, #4]
 8003dba:	60a5      	str	r5, [r4, #8]
 8003dbc:	2d00      	cmp	r5, #0
 8003dbe:	f2c0 8095 	blt.w	8003eec <_printf_i+0x20c>
 8003dc2:	6821      	ldr	r1, [r4, #0]
 8003dc4:	f021 0104 	bic.w	r1, r1, #4
 8003dc8:	6021      	str	r1, [r4, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d13d      	bne.n	8003e4a <_printf_i+0x16a>
 8003dce:	2d00      	cmp	r5, #0
 8003dd0:	f040 808e 	bne.w	8003ef0 <_printf_i+0x210>
 8003dd4:	4665      	mov	r5, ip
 8003dd6:	2a08      	cmp	r2, #8
 8003dd8:	d10b      	bne.n	8003df2 <_printf_i+0x112>
 8003dda:	6823      	ldr	r3, [r4, #0]
 8003ddc:	07db      	lsls	r3, r3, #31
 8003dde:	d508      	bpl.n	8003df2 <_printf_i+0x112>
 8003de0:	6923      	ldr	r3, [r4, #16]
 8003de2:	6862      	ldr	r2, [r4, #4]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	bfde      	ittt	le
 8003de8:	2330      	movle	r3, #48	; 0x30
 8003dea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003dee:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003df2:	ebac 0305 	sub.w	r3, ip, r5
 8003df6:	6123      	str	r3, [r4, #16]
 8003df8:	f8cd 8000 	str.w	r8, [sp]
 8003dfc:	463b      	mov	r3, r7
 8003dfe:	aa03      	add	r2, sp, #12
 8003e00:	4621      	mov	r1, r4
 8003e02:	4630      	mov	r0, r6
 8003e04:	f7ff fef6 	bl	8003bf4 <_printf_common>
 8003e08:	3001      	adds	r0, #1
 8003e0a:	d14d      	bne.n	8003ea8 <_printf_i+0x1c8>
 8003e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e10:	b005      	add	sp, #20
 8003e12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e16:	4839      	ldr	r0, [pc, #228]	; (8003efc <_printf_i+0x21c>)
 8003e18:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003e1c:	6813      	ldr	r3, [r2, #0]
 8003e1e:	6821      	ldr	r1, [r4, #0]
 8003e20:	1d1d      	adds	r5, r3, #4
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6015      	str	r5, [r2, #0]
 8003e26:	060a      	lsls	r2, r1, #24
 8003e28:	d50b      	bpl.n	8003e42 <_printf_i+0x162>
 8003e2a:	07ca      	lsls	r2, r1, #31
 8003e2c:	bf44      	itt	mi
 8003e2e:	f041 0120 	orrmi.w	r1, r1, #32
 8003e32:	6021      	strmi	r1, [r4, #0]
 8003e34:	b91b      	cbnz	r3, 8003e3e <_printf_i+0x15e>
 8003e36:	6822      	ldr	r2, [r4, #0]
 8003e38:	f022 0220 	bic.w	r2, r2, #32
 8003e3c:	6022      	str	r2, [r4, #0]
 8003e3e:	2210      	movs	r2, #16
 8003e40:	e7b7      	b.n	8003db2 <_printf_i+0xd2>
 8003e42:	064d      	lsls	r5, r1, #25
 8003e44:	bf48      	it	mi
 8003e46:	b29b      	uxthmi	r3, r3
 8003e48:	e7ef      	b.n	8003e2a <_printf_i+0x14a>
 8003e4a:	4665      	mov	r5, ip
 8003e4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e50:	fb02 3311 	mls	r3, r2, r1, r3
 8003e54:	5cc3      	ldrb	r3, [r0, r3]
 8003e56:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	2900      	cmp	r1, #0
 8003e5e:	d1f5      	bne.n	8003e4c <_printf_i+0x16c>
 8003e60:	e7b9      	b.n	8003dd6 <_printf_i+0xf6>
 8003e62:	6813      	ldr	r3, [r2, #0]
 8003e64:	6825      	ldr	r5, [r4, #0]
 8003e66:	6961      	ldr	r1, [r4, #20]
 8003e68:	1d18      	adds	r0, r3, #4
 8003e6a:	6010      	str	r0, [r2, #0]
 8003e6c:	0628      	lsls	r0, r5, #24
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	d501      	bpl.n	8003e76 <_printf_i+0x196>
 8003e72:	6019      	str	r1, [r3, #0]
 8003e74:	e002      	b.n	8003e7c <_printf_i+0x19c>
 8003e76:	066a      	lsls	r2, r5, #25
 8003e78:	d5fb      	bpl.n	8003e72 <_printf_i+0x192>
 8003e7a:	8019      	strh	r1, [r3, #0]
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	6123      	str	r3, [r4, #16]
 8003e80:	4665      	mov	r5, ip
 8003e82:	e7b9      	b.n	8003df8 <_printf_i+0x118>
 8003e84:	6813      	ldr	r3, [r2, #0]
 8003e86:	1d19      	adds	r1, r3, #4
 8003e88:	6011      	str	r1, [r2, #0]
 8003e8a:	681d      	ldr	r5, [r3, #0]
 8003e8c:	6862      	ldr	r2, [r4, #4]
 8003e8e:	2100      	movs	r1, #0
 8003e90:	4628      	mov	r0, r5
 8003e92:	f7fc f99d 	bl	80001d0 <memchr>
 8003e96:	b108      	cbz	r0, 8003e9c <_printf_i+0x1bc>
 8003e98:	1b40      	subs	r0, r0, r5
 8003e9a:	6060      	str	r0, [r4, #4]
 8003e9c:	6863      	ldr	r3, [r4, #4]
 8003e9e:	6123      	str	r3, [r4, #16]
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ea6:	e7a7      	b.n	8003df8 <_printf_i+0x118>
 8003ea8:	6923      	ldr	r3, [r4, #16]
 8003eaa:	462a      	mov	r2, r5
 8003eac:	4639      	mov	r1, r7
 8003eae:	4630      	mov	r0, r6
 8003eb0:	47c0      	blx	r8
 8003eb2:	3001      	adds	r0, #1
 8003eb4:	d0aa      	beq.n	8003e0c <_printf_i+0x12c>
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	079b      	lsls	r3, r3, #30
 8003eba:	d413      	bmi.n	8003ee4 <_printf_i+0x204>
 8003ebc:	68e0      	ldr	r0, [r4, #12]
 8003ebe:	9b03      	ldr	r3, [sp, #12]
 8003ec0:	4298      	cmp	r0, r3
 8003ec2:	bfb8      	it	lt
 8003ec4:	4618      	movlt	r0, r3
 8003ec6:	e7a3      	b.n	8003e10 <_printf_i+0x130>
 8003ec8:	2301      	movs	r3, #1
 8003eca:	464a      	mov	r2, r9
 8003ecc:	4639      	mov	r1, r7
 8003ece:	4630      	mov	r0, r6
 8003ed0:	47c0      	blx	r8
 8003ed2:	3001      	adds	r0, #1
 8003ed4:	d09a      	beq.n	8003e0c <_printf_i+0x12c>
 8003ed6:	3501      	adds	r5, #1
 8003ed8:	68e3      	ldr	r3, [r4, #12]
 8003eda:	9a03      	ldr	r2, [sp, #12]
 8003edc:	1a9b      	subs	r3, r3, r2
 8003ede:	42ab      	cmp	r3, r5
 8003ee0:	dcf2      	bgt.n	8003ec8 <_printf_i+0x1e8>
 8003ee2:	e7eb      	b.n	8003ebc <_printf_i+0x1dc>
 8003ee4:	2500      	movs	r5, #0
 8003ee6:	f104 0919 	add.w	r9, r4, #25
 8003eea:	e7f5      	b.n	8003ed8 <_printf_i+0x1f8>
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1ac      	bne.n	8003e4a <_printf_i+0x16a>
 8003ef0:	7803      	ldrb	r3, [r0, #0]
 8003ef2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ef6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003efa:	e76c      	b.n	8003dd6 <_printf_i+0xf6>
 8003efc:	08004131 	.word	0x08004131
 8003f00:	08004142 	.word	0x08004142

08003f04 <_sbrk_r>:
 8003f04:	b538      	push	{r3, r4, r5, lr}
 8003f06:	4c06      	ldr	r4, [pc, #24]	; (8003f20 <_sbrk_r+0x1c>)
 8003f08:	2300      	movs	r3, #0
 8003f0a:	4605      	mov	r5, r0
 8003f0c:	4608      	mov	r0, r1
 8003f0e:	6023      	str	r3, [r4, #0]
 8003f10:	f7fd fb10 	bl	8001534 <_sbrk>
 8003f14:	1c43      	adds	r3, r0, #1
 8003f16:	d102      	bne.n	8003f1e <_sbrk_r+0x1a>
 8003f18:	6823      	ldr	r3, [r4, #0]
 8003f1a:	b103      	cbz	r3, 8003f1e <_sbrk_r+0x1a>
 8003f1c:	602b      	str	r3, [r5, #0]
 8003f1e:	bd38      	pop	{r3, r4, r5, pc}
 8003f20:	20000150 	.word	0x20000150

08003f24 <__sread>:
 8003f24:	b510      	push	{r4, lr}
 8003f26:	460c      	mov	r4, r1
 8003f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f2c:	f000 f896 	bl	800405c <_read_r>
 8003f30:	2800      	cmp	r0, #0
 8003f32:	bfab      	itete	ge
 8003f34:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f36:	89a3      	ldrhlt	r3, [r4, #12]
 8003f38:	181b      	addge	r3, r3, r0
 8003f3a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f3e:	bfac      	ite	ge
 8003f40:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f42:	81a3      	strhlt	r3, [r4, #12]
 8003f44:	bd10      	pop	{r4, pc}

08003f46 <__swrite>:
 8003f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f4a:	461f      	mov	r7, r3
 8003f4c:	898b      	ldrh	r3, [r1, #12]
 8003f4e:	05db      	lsls	r3, r3, #23
 8003f50:	4605      	mov	r5, r0
 8003f52:	460c      	mov	r4, r1
 8003f54:	4616      	mov	r6, r2
 8003f56:	d505      	bpl.n	8003f64 <__swrite+0x1e>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f60:	f000 f868 	bl	8004034 <_lseek_r>
 8003f64:	89a3      	ldrh	r3, [r4, #12]
 8003f66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f6e:	81a3      	strh	r3, [r4, #12]
 8003f70:	4632      	mov	r2, r6
 8003f72:	463b      	mov	r3, r7
 8003f74:	4628      	mov	r0, r5
 8003f76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f7a:	f000 b817 	b.w	8003fac <_write_r>

08003f7e <__sseek>:
 8003f7e:	b510      	push	{r4, lr}
 8003f80:	460c      	mov	r4, r1
 8003f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f86:	f000 f855 	bl	8004034 <_lseek_r>
 8003f8a:	1c43      	adds	r3, r0, #1
 8003f8c:	89a3      	ldrh	r3, [r4, #12]
 8003f8e:	bf15      	itete	ne
 8003f90:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f9a:	81a3      	strheq	r3, [r4, #12]
 8003f9c:	bf18      	it	ne
 8003f9e:	81a3      	strhne	r3, [r4, #12]
 8003fa0:	bd10      	pop	{r4, pc}

08003fa2 <__sclose>:
 8003fa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fa6:	f000 b813 	b.w	8003fd0 <_close_r>
	...

08003fac <_write_r>:
 8003fac:	b538      	push	{r3, r4, r5, lr}
 8003fae:	4c07      	ldr	r4, [pc, #28]	; (8003fcc <_write_r+0x20>)
 8003fb0:	4605      	mov	r5, r0
 8003fb2:	4608      	mov	r0, r1
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	6022      	str	r2, [r4, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f7fd fa69 	bl	8001492 <_write>
 8003fc0:	1c43      	adds	r3, r0, #1
 8003fc2:	d102      	bne.n	8003fca <_write_r+0x1e>
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	b103      	cbz	r3, 8003fca <_write_r+0x1e>
 8003fc8:	602b      	str	r3, [r5, #0]
 8003fca:	bd38      	pop	{r3, r4, r5, pc}
 8003fcc:	20000150 	.word	0x20000150

08003fd0 <_close_r>:
 8003fd0:	b538      	push	{r3, r4, r5, lr}
 8003fd2:	4c06      	ldr	r4, [pc, #24]	; (8003fec <_close_r+0x1c>)
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	4605      	mov	r5, r0
 8003fd8:	4608      	mov	r0, r1
 8003fda:	6023      	str	r3, [r4, #0]
 8003fdc:	f7fd fa75 	bl	80014ca <_close>
 8003fe0:	1c43      	adds	r3, r0, #1
 8003fe2:	d102      	bne.n	8003fea <_close_r+0x1a>
 8003fe4:	6823      	ldr	r3, [r4, #0]
 8003fe6:	b103      	cbz	r3, 8003fea <_close_r+0x1a>
 8003fe8:	602b      	str	r3, [r5, #0]
 8003fea:	bd38      	pop	{r3, r4, r5, pc}
 8003fec:	20000150 	.word	0x20000150

08003ff0 <_fstat_r>:
 8003ff0:	b538      	push	{r3, r4, r5, lr}
 8003ff2:	4c07      	ldr	r4, [pc, #28]	; (8004010 <_fstat_r+0x20>)
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	4605      	mov	r5, r0
 8003ff8:	4608      	mov	r0, r1
 8003ffa:	4611      	mov	r1, r2
 8003ffc:	6023      	str	r3, [r4, #0]
 8003ffe:	f7fd fa70 	bl	80014e2 <_fstat>
 8004002:	1c43      	adds	r3, r0, #1
 8004004:	d102      	bne.n	800400c <_fstat_r+0x1c>
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	b103      	cbz	r3, 800400c <_fstat_r+0x1c>
 800400a:	602b      	str	r3, [r5, #0]
 800400c:	bd38      	pop	{r3, r4, r5, pc}
 800400e:	bf00      	nop
 8004010:	20000150 	.word	0x20000150

08004014 <_isatty_r>:
 8004014:	b538      	push	{r3, r4, r5, lr}
 8004016:	4c06      	ldr	r4, [pc, #24]	; (8004030 <_isatty_r+0x1c>)
 8004018:	2300      	movs	r3, #0
 800401a:	4605      	mov	r5, r0
 800401c:	4608      	mov	r0, r1
 800401e:	6023      	str	r3, [r4, #0]
 8004020:	f7fd fa6f 	bl	8001502 <_isatty>
 8004024:	1c43      	adds	r3, r0, #1
 8004026:	d102      	bne.n	800402e <_isatty_r+0x1a>
 8004028:	6823      	ldr	r3, [r4, #0]
 800402a:	b103      	cbz	r3, 800402e <_isatty_r+0x1a>
 800402c:	602b      	str	r3, [r5, #0]
 800402e:	bd38      	pop	{r3, r4, r5, pc}
 8004030:	20000150 	.word	0x20000150

08004034 <_lseek_r>:
 8004034:	b538      	push	{r3, r4, r5, lr}
 8004036:	4c07      	ldr	r4, [pc, #28]	; (8004054 <_lseek_r+0x20>)
 8004038:	4605      	mov	r5, r0
 800403a:	4608      	mov	r0, r1
 800403c:	4611      	mov	r1, r2
 800403e:	2200      	movs	r2, #0
 8004040:	6022      	str	r2, [r4, #0]
 8004042:	461a      	mov	r2, r3
 8004044:	f7fd fa68 	bl	8001518 <_lseek>
 8004048:	1c43      	adds	r3, r0, #1
 800404a:	d102      	bne.n	8004052 <_lseek_r+0x1e>
 800404c:	6823      	ldr	r3, [r4, #0]
 800404e:	b103      	cbz	r3, 8004052 <_lseek_r+0x1e>
 8004050:	602b      	str	r3, [r5, #0]
 8004052:	bd38      	pop	{r3, r4, r5, pc}
 8004054:	20000150 	.word	0x20000150

08004058 <__malloc_lock>:
 8004058:	4770      	bx	lr

0800405a <__malloc_unlock>:
 800405a:	4770      	bx	lr

0800405c <_read_r>:
 800405c:	b538      	push	{r3, r4, r5, lr}
 800405e:	4c07      	ldr	r4, [pc, #28]	; (800407c <_read_r+0x20>)
 8004060:	4605      	mov	r5, r0
 8004062:	4608      	mov	r0, r1
 8004064:	4611      	mov	r1, r2
 8004066:	2200      	movs	r2, #0
 8004068:	6022      	str	r2, [r4, #0]
 800406a:	461a      	mov	r2, r3
 800406c:	f7fd f9f4 	bl	8001458 <_read>
 8004070:	1c43      	adds	r3, r0, #1
 8004072:	d102      	bne.n	800407a <_read_r+0x1e>
 8004074:	6823      	ldr	r3, [r4, #0]
 8004076:	b103      	cbz	r3, 800407a <_read_r+0x1e>
 8004078:	602b      	str	r3, [r5, #0]
 800407a:	bd38      	pop	{r3, r4, r5, pc}
 800407c:	20000150 	.word	0x20000150

08004080 <_init>:
 8004080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004082:	bf00      	nop
 8004084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004086:	bc08      	pop	{r3}
 8004088:	469e      	mov	lr, r3
 800408a:	4770      	bx	lr

0800408c <_fini>:
 800408c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408e:	bf00      	nop
 8004090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004092:	bc08      	pop	{r3}
 8004094:	469e      	mov	lr, r3
 8004096:	4770      	bx	lr
